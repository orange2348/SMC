//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2005, 2006, 2008 - 2009, 2019. Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//   Eitan Suez contributed examples/Ant.
//   (Name withheld) contributed the C# code generation and
//   examples/C#.
//   Francois Perrad contributed the Python code generation and
//   examples/Python.
//   Chris Liscio contributed the Objective-C code generation
//   and examples/ObjC.
//
// RCS ID
// Id: SmcCppGenerator.java,v 1.16 2015/02/16 21:43:09 cwrapp Exp
//
// CHANGE LOG
// (See the bottom of this file.)
//

package net.sf.smc.generator;

import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import net.sf.smc.model.SmcAction;
import net.sf.smc.model.SmcElement;
import net.sf.smc.model.SmcElement.TransType;
import net.sf.smc.model.SmcFSM;
import net.sf.smc.model.SmcGuard;
import net.sf.smc.model.SmcMap;
import net.sf.smc.model.SmcParameter;
import net.sf.smc.model.SmcState;
import net.sf.smc.model.SmcTransition;
import net.sf.smc.model.SmcVisitor;
import net.sf.smc.model.TargetLanguage;

/**
 * Visits the abstract syntax tree emitting C++ code.
 * @see SmcElement
 * @see SmcCodeGenerator
 * @see SmcVisitor
 * @see SmcOptions
 *
 * @author <a href="mailto:rapp@acm.org">Charles Rapp</a>
 */

public final class SmcCppGenerator
    extends SmcCodeGenerator
{
//---------------------------------------------------------------
// Member methods
//

    //-----------------------------------------------------------
    // Constructors.
    //

    /**
     * Creates a C++ code generator for the given options.
     * @param options The target code generator options.
     */
    public SmcCppGenerator(final SmcOptions options)
    {
        super (options, TargetLanguage.C_PLUS_PLUS.suffix());
    } // end of SmcCppGenerator(SmcOptions)

    //
    // end of Constructors.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // SmcVisitor Abstract Method Impelementation.
    //

    /**
     * Emits C++ code for the finite state machine.
     * This method generates the following code:
     * <pre>
     *   <code>
 %{ %} raw target code - if any

 #include <i>%include header file</i>
     * #include "<i>context</i>_sm.<i>hsuffix</i>"
     * (If the -headerd option is used, then this is generated:
     * #include "<i>header dir</i>/<i>context</i>.<i>hsuffix</i>")
     *
     * using namespace statemap;
     * using namespace <i>%import namespace</i>
     *
     * (put namespace a { namespace b ... if %package defined.)
     *
     * Static class declarations.
     * <i>map name</i>_<i>state name</i> <i>map name</i>::<i>state</i>("<i>map name</i>::<i>state name</i>", <i>index</i>)
     *   </code>
     * </pre>
     * @param fsm emit C# code for this finite state machine.
     */
    @Override
    public void visit(SmcFSM fsm)
    {
        String packageName = fsm.getPackage();
        String rawSource = fsm.getSource();
        String context = fsm.getContext();
        String fsmClassName = fsm.getFsmClassName();
        String mapName;
        List<SmcTransition> transList;
        String separator;
        List<SmcParameter> params;
        Iterator<SmcMap> mapIt;
        Iterator<SmcState> stateIt;
        int packageDepth = 0;
        SmcMap map;
        SmcState state;
        int index;

        mTarget.println("//");
        mTarget.println("// ex: set ro:");
        mTarget.println("// DO NOT EDIT.");
        mTarget.println("// generated by smc (http://smc.sourceforge.net/)");
        mTarget.print("// from file : ");
        mTarget.print(mSrcfileBase);
        mTarget.println(".sm");
        mTarget.println("//");
        mTarget.println();

        // Dump out the raw target code, if any.
        if (rawSource != null && rawSource.length() > 0)
        {
            mTarget.println(rawSource);
            mTarget.println();
        }

        // Generate #includes.
        for (String include: fsm.getIncludes())
        {
            mTarget.print("#include ");
            mTarget.println(include);
        }

        // Include the context file last.
        // Is the header file included in a different directory
        // than the target file?
        mTarget.print("#include \"");
        if (mSrcDirectory.equals(mHeaderDirectory) == false)
        {
            // They are in different directories. Prepend the
            // path from the target file directory to the header
            // file directory.
            mTarget.print(
                findPath(mSrcDirectory, mHeaderDirectory));
        }
        // Else they are in the same directory.
        else
        {
            mTarget.print(mSrcDirectory);
        }
        mTarget.print(mTargetfileBase);
        mTarget.format(".%s\"%n", mHeaderSuffix);

        // Import the statemap namespace symbols into the main
        // namespace.
        mTarget.println();
        mTarget.println("using namespace statemap;");

        // Do user-specified imports now.
        for (String imp: fsm.getImports())
        {
            mTarget.print("using namespace ");
            mTarget.print(imp);
            mTarget.println(";");
        }

        // End of namespace imports.
        mTarget.println();

        // Import the user-defined namespace into the main
        // namespace. If the package name is "a::b::c", then
        // this must be converted to:
        // namespace a {
        //   namespace b {
        //     namespace c {
        //       ...
        //     }
        //   }
        // }
        if (packageName != null && packageName.length() > 0)
        {
            mIndent = "";
            StringTokenizer tokenizer =
                new StringTokenizer(packageName, "::");
            String token;

            while (tokenizer.hasMoreTokens())
            {
                token = tokenizer.nextToken();
                ++packageDepth;

                mTarget.print(mIndent);
                mTarget.print("namespace ");
                mTarget.println(token);
                mTarget.print(mIndent);
                mTarget.println("{");
                mIndent += "    ";
            }
        }

        // Statically declare all derived state classes.
        mTarget.print(mIndent);
        mTarget.println("// Static class declarations.");
        for (mapIt = fsm.getMaps().iterator(), index = 0;
             mapIt.hasNext();
            )
        {
            map = mapIt.next();
            mapName = map.getName();
            for (stateIt = map.getStates().iterator();
                 stateIt.hasNext();
                 ++index)
            {
                state = stateIt.next();
                mTarget.print(mIndent);
                mTarget.print(mapName);
                mTarget.print("_");
                mTarget.print(state.getClassName());
                mTarget.print(" ");
                mTarget.print(mapName);
                mTarget.print("::");
                mTarget.print(state.getInstanceName());
                mTarget.print("(\"");
                mTarget.print(mapName);
                mTarget.print("::");
                mTarget.print(state.getClassName());
                mTarget.print("\", ");
                mTarget.print(index);
                mTarget.println(");");
            }
        }

        // v. 2.2.0: If supporting serialization, then set the
        // min and max indices and the state array.
        if (mSerialFlag)
        {
            mTarget.println();
            mTarget.print(mIndent);
            if (mCRTPFlag)
            {
                mTarget.print("template<> ");
            }
            mTarget.print("const int ");
            mTarget.print(fsmClassName);
            if (mCRTPFlag)
            {
                mTarget.print("<");
                mTarget.print(context);
                mTarget.print(">");
            }
            mTarget.println("::MIN_INDEX = 0;");
            mTarget.print(mIndent);
            if (mCRTPFlag)
            {
                mTarget.print("template<> ");
            }
            mTarget.print("const int ");
            mTarget.print(fsmClassName);
            if (mCRTPFlag)
            {
                mTarget.print("<");
                mTarget.print(context);
                mTarget.print(">");
            }
            mTarget.print("::MAX_INDEX = ");
            --index;
            mTarget.print(index);
            mTarget.println(";");
            mTarget.print(mIndent);
            if (mCRTPFlag)
            {
                mTarget.print("template<> ");
            }
            mTarget.print(context);
            mTarget.print("State* ");
            mTarget.print(fsmClassName);
            if (mCRTPFlag)
            {
                mTarget.print("<");
                mTarget.print(context);
                mTarget.print(">");
            }
            mTarget.println("::_States[] = ");
            mTarget.print(mIndent);
            mTarget.print("{");

            for (mapIt = fsm.getMaps().iterator(),
                     separator = "";
                 mapIt.hasNext();
                )
            {
                map = mapIt.next();
                mapName = map.getName();
                for (stateIt = map.getStates().iterator();
                     stateIt.hasNext();
                     separator = ",")
                {
                    state = stateIt.next();
                    mTarget.print(separator);
                    mTarget.println();
                    mTarget.print(mIndent);
                    mTarget.print("    &");
                    mTarget.print(mapName);
                    mTarget.print("::");
                    mTarget.print(state.getClassName());
                }
            }

            mTarget.println();
            mTarget.print(mIndent);
            mTarget.println("};");

            // Output the valueOf method.
            mTarget.println();
            mTarget.print(mIndent);
            if (mCRTPFlag)
            {
                mTarget.print("template<> ");
            }
            mTarget.print(context);
            mTarget.print("State& ");
            mTarget.print(fsmClassName);
            if (mCRTPFlag)
            {
                mTarget.print("<");
                mTarget.print(context);
                mTarget.print(">");
            }
            mTarget.println("::valueOf(int stateId)");
            mTarget.print(mIndent);
            mTarget.println("{");

            // If exceptions are not being thrown, then assert
            // instead.
            if (mNoExceptionFlag)
            {
                mTarget.print(mIndent);
                mTarget.println("    assert(stateId >= MIN_INDEX);");
                mTarget.print(mIndent);
                mTarget.println("    assert(stateId <= MAX_INDEX);");
            }
            else
            {
                mTarget.print(mIndent);
                mTarget.print("    if ((stateId < MIN_INDEX) || ");
                mTarget.println("(stateId > MAX_INDEX))");
                mTarget.print(mIndent);
                mTarget.println("    {");
                mTarget.print(mIndent);
                mTarget.println("        throw (");
                mTarget.print(mIndent);
                mTarget.println(
                    "            IndexOutOfBoundsException(");
                mTarget.print(mIndent);
                mTarget.print(
                    "                stateId, MIN_INDEX, ");
                mTarget.println("MAX_INDEX));");
                mTarget.print(mIndent);
                mTarget.println("    }");
            }

            mTarget.println();
            mTarget.print(mIndent);
            mTarget.print("    return static_cast<");
            mTarget.print(context);
            mTarget.print("State&>(*(");
            mTarget.println("_States[stateId]));");
            mTarget.print(mIndent);
            mTarget.println("}");
        }

        // Print out the default definitions for all the
        // transitions. First, get the transitions list.
        transList = fsm.getTransitions();

        // Output the default transition definitions.
        for (SmcTransition trans: transList)
        {
            if (trans.getName().equals("Default") == false)
            {
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.print("void ");
                mTarget.print(context);
                mTarget.print("State::");
                mTarget.print(trans.getName());
                mTarget.print("(");
                mTarget.print(fsmClassName);
                if (mCRTPFlag)
                {
                    mTarget.print("<");
                    mTarget.print(context);
                    mTarget.print(">");
                }
                mTarget.print("& context");

                params = trans.getParameters();
                for (SmcParameter param: params)
                {
                    mTarget.print(", ");
                    param.accept(this);
                }

                mTarget.println(")");
                mTarget.print(mIndent);
                mTarget.println("{");
                mTarget.print(mIndent);
                mTarget.println("    Default(context);");
                mTarget.print(mIndent);
                mTarget.println("}");
            }
        }

        // Output the Default transition method ... almost.
        // If -g is being used, then add the "s" argname.
        mTarget.println();
        mTarget.print(mIndent);
        mTarget.print("void ");
        mTarget.print(context);
        mTarget.print("State::Default(");
        mTarget.print(fsmClassName);
        if (mCRTPFlag)
        {
            mTarget.print("<");
            mTarget.print(context);
            mTarget.print(">");
        }
        mTarget.println("& context)");
        mTarget.print(mIndent);
        mTarget.println("{");

        // Print the transition out to the verbose log.
        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.print(mIndent);
            mTarget.println(
                "    if (context.getDebugFlag())");
            mTarget.print(mIndent);
            mTarget.println("    {");

            // Are we using C++ iostreams or the app's TRACE
            // macro?
            if (mNoStreamsFlag)
            {
                // The TRACE macro.
                mTarget.print(mIndent);
                mTarget.print("        TRACE(");
                mTarget.println(
                    "\"TRANSITION   : Default\\n\");");
            }
            else
            {
                mTarget.print(mIndent);
                mTarget.print("        std::ostream& str = ");
                mTarget.println("context.getDebugStream();");
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.println(
                    "        str << \"TRANSITION   : Default\"");
                mTarget.print(mIndent);
                mTarget.println("            << std::endl;");
            }

            mTarget.print(mIndent);
            mTarget.println("    }");
            mTarget.println();
        }

        // A transition has been issued which has no
        // definition in the current state and there
        // is no default to cover for it. Throw an
        // exception.
        // v. 1.3.1: But only if -noex was not specified.
        if (mNoExceptionFlag == false)
        {
            mTarget.print(mIndent);
            mTarget.println("    throw (");
            mTarget.print(mIndent);
            mTarget.println(
                "        TransitionUndefinedException(");
            mTarget.print(mIndent);
            mTarget.println(
                "            context.getState().getName(),");
            mTarget.print(mIndent);
            mTarget.println(
                "            context.getTransition()));");
            mTarget.println();
        }
        else
        {
            // Otherwise, generate an assert.
            mTarget.print(mIndent);
            mTarget.println("    assert(false);");
            mTarget.println();
        }

        mTarget.print(mIndent);
        mTarget.println("}");

        // Have each map print out its target code now.
        for (mapIt = fsm.getMaps().iterator();
             mapIt.hasNext();
            )
        {
            (mapIt.next()).accept(this);
        }

        // If a namespace was specified, then put the
        // ending braces on the namespace now.
        if (packageName != null && packageName.length() > 0)
        {
            int i;
            int j;

            for (i = (packageDepth - 1); i >= 0; --i)
            {
                // Output the proper indent.
                for (j = 0; j < i; ++j)
                {
                    mTarget.print("    ");
                }

                mTarget.println("}");
            }
        }

        mTarget.println();
        mTarget.println("//");
        mTarget.println("// Local variables:");
        mTarget.println("//  buffer-read-only: t");
        mTarget.println("// End:");
        mTarget.println("//");

        return;
    } // end of visit(SmcFSM)

    /**
     * Emits C++ code for the FSM map.
     * @param map emit C++ code for this map.
     */
    @Override
    public void visit(SmcMap map)
    {
        // Declare the user-defined default transitions first.
        if (map.hasDefaultState())
        {
            SmcState defaultState = map.getDefaultState();

            for (SmcTransition trans:
                     defaultState.getTransitions())
            {
                trans.accept(this);
            }
        }

        // Have each state now generate its code.
        for (SmcState state: map.getStates())
        {
            state.accept(this);
        }

        return;
    } // end of visit(SmcMap)

    /**
     * Emits C++ code for this FSM state.
     * @param state emits C++ code for this state.
     */
    @Override
    public void visit(SmcState state)
    {
        SmcMap map = state.getMap();
        String context = map.getFSM().getContext();
        String fsmClassName = map.getFSM().getFsmClassName();
        String mapName = map.getName();
        String className = state.getClassName();
        String indent2;
        List<SmcAction> actions;

        // Add the Entry() and Exit() methods if this state
        // defines them.
        actions = state.getEntryActions();
        if (actions != null && actions.isEmpty() == false)
        {
            mTarget.println();
            mTarget.print(mIndent);
            mTarget.print("void ");
            mTarget.print(mapName);
            mTarget.print("_");
            mTarget.print(className);
            mTarget.print("::Entry(");
            mTarget.print(fsmClassName);
            if (mCRTPFlag)
            {
                mTarget.print("<");
                mTarget.print(context);
                mTarget.print(">");
            }
            mTarget.println("& context)");
            mTarget.println();
            mTarget.println("{");

            // Declare the "ctxt" local variable.
            mTarget.print(mIndent);
            mTarget.print("    ");
            mTarget.print(context);
            mTarget.println("& ctxt = context.getOwner();");
            mTarget.println();

            // Generate the actions associated with this code.
            indent2 = mIndent;
            mIndent += "    ";
            for (SmcAction action: actions)
            {
                action.accept(this);
            }
            mIndent = indent2;

            // End the Entry() method.
            mTarget.print(mIndent);
            mTarget.println("}");
        }

        actions = state.getExitActions();
        if (actions != null && actions.isEmpty() == false)
        {
            mTarget.println();
            mTarget.print(mIndent);
            mTarget.print("void ");
            mTarget.print(mapName);
            mTarget.print("_");
            mTarget.print(className);
            mTarget.print("::Exit(");
            mTarget.print(fsmClassName);
            if (mCRTPFlag)
            {
                mTarget.print("<");
                mTarget.print(context);
                mTarget.print(">");
            }
            mTarget.println("& context)");
            mTarget.println();
            mTarget.println("{");

            // Declare the "ctxt" local variable.
            mTarget.print(mIndent);
            mTarget.print("    ");
            mTarget.print(context);
            mTarget.println("& ctxt = context.getOwner();");
            mTarget.println();

            // Generate the actions associated with this code.
            indent2 = mIndent;
            mIndent += "    ";
            for (SmcAction action: actions)
            {
                action.accept(this);
            }
            mIndent = indent2;

            // End the Entry() method.
            mTarget.print(mIndent);
            mTarget.println("}");
        }

        // Have the transitions generate their code.
        for (SmcTransition trans: state.getTransitions())
        {
            trans.accept(this);
        }

        return;
    } // end of visit(SmcState)

    /**
     * Emits C++ code for this FSM state transition.
     * @param transition emits C++ code for this state transition.
     */
    @Override
    public void visit(SmcTransition transition)
    {
        SmcState state = transition.getState();
        SmcMap map = state.getMap();
        String context = map.getFSM().getContext();
        String fsmClassName = map.getFSM().getFsmClassName();
        String mapName = map.getName();
        String stateName = state.getClassName();
        String instanceName = state.getInstanceName();
        String transName = transition.getName();
        SmcGuard nullGuard = null;
        List<SmcGuard> guards = transition.getGuards();
        Iterator<SmcGuard> git = guards.iterator();
        SmcGuard guard;
        String fqStateName;

        // Qualify the state name as well.
        if (!stateName.contains("::"))
        {
            fqStateName = mapName + "::" + stateName;
        }
        else
        {
            fqStateName = stateName;
        }

        mTarget.println();
        mTarget.print(mIndent);
        mTarget.print("void ");
        mTarget.print(mapName);
        mTarget.print("_");
        mTarget.print(stateName);
        mTarget.print("::");
        mTarget.print(transName);
        mTarget.print("(");
        mTarget.print(fsmClassName);
        if (mCRTPFlag)
        {
            mTarget.print("<");
            mTarget.print(context);
            mTarget.print(">");
        }
        mTarget.print("& context");

        // Add user-defined parameters.
        for (SmcParameter param: transition.getParameters())
        {
            mTarget.print(", ");
            param.accept(this);
        }

        mTarget.println(")");
        mTarget.print(mIndent);
        mTarget.println("{");

        // All transitions have a "ctxt" local variable.
        // 8/14/2003:
        // Do this only if there are any transition actions or
        // guard conditions which reference it.
        if (transition.hasCtxtReference())
        {
            mTarget.print(mIndent);
            mTarget.print("    ");
            mTarget.print(context);
            mTarget.println("& ctxt = context.getOwner();");
        }

        mTarget.println();

        // Print the transition to the verbose log.
        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.print(mIndent);
            mTarget.println(
                "    if (context.getDebugFlag())");
            mTarget.print(mIndent);
            mTarget.println("    {");

            if (mNoStreamsFlag)
            {
                mTarget.print(mIndent);
                mTarget.print(
                    "        TRACE(\"LEAVING STATE   : ");
                mTarget.print(fqStateName);
                mTarget.println("\\n\");");
            }
            else
            {
                mTarget.print(mIndent);
                mTarget.print("        std::ostream& str = ");
                mTarget.println("context.getDebugStream();");
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.print(
                    "        str << \"LEAVING STATE   : ");
                mTarget.print(fqStateName);
                mTarget.println("\"");
                mTarget.println("                << std::endl;");
            }

            mTarget.print(mIndent);
            mTarget.println("    }");
            mTarget.println();
        }

        // Loop through the guards and print each one.
        mGuardIndex = 0;
        mGuardCount = guards.size();
        while (git.hasNext())
        {
            guard = git.next();

            // Output the no condition guard *after* all other
            // guarded transitions.
            if (guard.getCondition().isEmpty())
            {
                nullGuard = guard;
            }
            else
            {
                guard.accept(this);
                ++mGuardIndex;
            }
        }

        // Is there an explicitly defined unguarded transition?
        if (nullGuard != null)
        {
            // Does this guard have any actions or is this guard
            // *not* an internal loopback transition?
            if (nullGuard.hasActions() ||
                !(nullGuard.getEndState()).equals(SmcElement.NIL_STATE) ||
                nullGuard.getTransType() == TransType.TRANS_PUSH ||
                nullGuard.getTransType() == TransType.TRANS_POP)
            {
                // Need to output either the action and/or the
                // next state, so output the guard.
                nullGuard.accept(this);
            }

            mTarget.println();
        }
        // If all guards have a condition, then create a final
        // "else" clause which passes control to the default
        // transition.
        else if (mGuardIndex > 0)
        {
            // If there is only one transition definition, then
            // close off the guard.
            if (mGuardCount == 1)
            {
                mTarget.print(mIndent);
                mTarget.println("    }");
            }

            mTarget.print(mIndent);
            mTarget.println("    else");
            mTarget.print(mIndent);
            mTarget.println("    {");
            mTarget.print(mIndent);
            mTarget.print("         ");
            if (instanceName.equals("DefaultState") == false)
            {
                mTarget.print(mapName);
                mTarget.print("_Default::");
            }
            else
            {
                mTarget.print(context);
                mTarget.print("State::");
            }
            mTarget.print(transName);
            mTarget.print("(context");

            // Output user-defined parameters.
            for (SmcParameter param: transition.getParameters())
            {
                mTarget.print(", ");
                mTarget.print(param.getName());
            }
            mTarget.println(");");
            mTarget.print(mIndent);
            mTarget.println("    }");
            mTarget.println();
        }

        mTarget.println();
        mTarget.print(mIndent);
        mTarget.println("}");

        return;
    } // end of visit(SmcTransition)

    /**
     * Emits C++ code for this FSM transition guard.
     * @param guard emits C++ code for this transition guard.
     */
    @Override
    public void visit(SmcGuard guard)
    {
        SmcTransition transition = guard.getTransition();
        SmcState state = transition.getState();
        SmcMap map = state.getMap();
        String context = map.getFSM().getContext();
        String mapName = map.getName();
        String stateName = state.getClassName();
        TransType transType = guard.getTransType();
        boolean loopbackFlag;
        String indent2;
        String indent3;
        String indent4;
        String endStateName = guard.getEndState();
        String fqEndStateName = "";
        String pushStateName = guard.getPushState();
        String condition = guard.getCondition();
        List<SmcAction> actions = guard.getActions();

        // If this guard's end state is not of the form
        // "map::state", then prepend the map name to the state
        // name.
        // DON'T DO THIS IF THIS IS A POP TRANSITION!
        // The "state" is actually a transition name.
        if (transType != TransType.TRANS_POP &&
            endStateName.length () > 0 &&
            endStateName.equals("nil") == false &&
            !endStateName.contains("::"))
        {
            endStateName = mapName + "::" + endStateName;
        }

        // Qualify the state name as well.
        if (!stateName.contains("::"))
        {
            stateName = mapName + "::" + stateName;
        }

        loopbackFlag = isLoopback(transType, endStateName);

        // v. 2.0.2: If the push state is not fully-qualified,
        // then prepend the current map's name and make if
        // fully-qualified.
        if (pushStateName != null &&
            pushStateName.length() > 0 &&
            !pushStateName.contains("::"))
        {
            pushStateName = mapName + "::" + pushStateName;
        }

        // The guard code generation is a bit tricky. The first
        // question is how many guards are there? If there are
        // more than one, then we will need to generate the
        // proper "if-then-else" code.
        if (mGuardCount > 1)
        {
            indent2 = mIndent + "        ";

            // More than one guard. Is this the first guard?
            if (mGuardIndex == 0 && condition.length() > 0)
            {
                // Yes, this is the first. This means an
                // "if" should be used for this condition.
                mTarget.print(mIndent);
                mTarget.print("    if (");
                mTarget.print(condition);
                mTarget.println(")");
                mTarget.print(mIndent);
                mTarget.println("    {");
            }
            else if (condition.length() > 0)
            {
                // No, this is not the first transition but it
                // does have a condition. Use an "else if" for
                // the condition.
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.print("    else if (");
                mTarget.print(condition);
                mTarget.println(")");
                mTarget.println(mIndent);
                mTarget.println("    {");
            }
            else
            {
                // This is not the first transition and it has
                // no condition.
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.println("    else");
                mTarget.print(mIndent);
                mTarget.println("    {");
            }
        }
        else
        {
            // There is only one guard. Does this guard have a
            // condition.
            if (condition.length() == 0)
            {
                // Actually, this is a plain, old, vaniila
                // transition.
                indent2 = mIndent + "    ";
            }
            else
            {
                // Yes, there is a condition.
                mTarget.print(mIndent);
                mTarget.print("    if (");
                mTarget.print(condition);
                mTarget.println(")");
                mTarget.print(mIndent);
                mTarget.println("    {");
                indent2 = mIndent + "        ";
            }
        }

        // Now that the necessary conditions are in place, it's
        // time to dump out the transitions actions. First, do
        // the proper handling of the state change. If this
        // transition has no actions, then set the end state
        // immediately. Otherwise, unset the current state so
        // that if an action tries to issue a transition, it will
        // fail.
        if (actions.isEmpty() && !endStateName.isEmpty())
        {
            fqEndStateName = endStateName;
        }
        else if (!actions.isEmpty())
        {
            // Save away the current state if this is a loopback
            // transition. Storing current state allows the
            // current to be cleared before any actions are
            // executed. Remember: actions are not allowed to
            // issue transitions and clearing the current state
            // prevents them from doing so.
            if (loopbackFlag)
            {
                fqEndStateName = "endState";

                mTarget.print(indent2);
                mTarget.print(context);
                mTarget.print("State& ");
                mTarget.print(fqEndStateName);
                mTarget.println(" = context.getState();");
                mTarget.println();
            }
            else
            {
                fqEndStateName = endStateName;
            }
        }

        // Before doing anything else, perform the current
        // state's exit actions.
        // v. 1.0, beta 3: Not any more. The exit actions are
        // executed only if 1) this is a standard, non-loopback
        // transition or a pop transition.
        if (transType == TransType.TRANS_POP ||
            loopbackFlag == false)
        {
            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println(
                    "if (context.getDebugFlag())");
                mTarget.print(indent2);
                mTarget.println("{");

                if (mNoStreamsFlag)
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    TRACE(\"BEFORE EXIT     : ");
                    mTarget.print(stateName);
                    mTarget.println(
                        "::Exit(context)\\n\");");
                }
                else
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    std::ostream& str = ");
                    mTarget.println("context.getDebugStream();");
                    mTarget.println();
                    mTarget.print(indent2);
                    mTarget.print(
                        "    str << \"BEFORE EXIT     : ");
                    mTarget.print(stateName);
                    mTarget.println("::Exit(context)\"");
                    mTarget.print(indent2);
                    mTarget.println("        << std::endl;");
                }

                mTarget.print(indent2);
                mTarget.println("}");
                mTarget.println();
            }

            mTarget.print(indent2);
            mTarget.println(
                "context.getState().Exit(context);");

            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println(
                    "if (context.getDebugFlag())");
                mTarget.print(indent2);
                mTarget.println("{");

                if (mNoStreamsFlag)
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    TRACE(\"AFTER EXIT      : ");
                    mTarget.print(stateName);
                    mTarget.println(
                        "::Exit(context)\\n\");");
                }
                else
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    std::ostream& str = ");
                    mTarget.println("context.getDebugStream();");
                    mTarget.println();
                    mTarget.print(indent2);
                    mTarget.print(
                        "    str << \"AFTER EXIT      : ");
                    mTarget.print(stateName);
                    mTarget.println("::Exit(context)\"");
                    mTarget.print(indent2);
                    mTarget.println("            << std::endl;");
                }

                mTarget.print(indent2);
                mTarget.println("}");
                mTarget.println();
            }
        }

        // Output transition to debug stream.
        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            String transName = transition.getName();
            List<SmcParameter> parameters =
                transition.getParameters();
            Iterator<SmcParameter> pit;
            String sep;

            mTarget.print(indent2);
            mTarget.println(
                "if (context.getDebugFlag())");
            mTarget.print(indent2);
            mTarget.println("{");

            if (mNoStreamsFlag)
            {
                mTarget.print(indent2);
                mTarget.print("    TRACE(\"ENTER TRANSITION: ");
                mTarget.print(stateName);
                mTarget.print("::");
                mTarget.print(transName);
                mTarget.print("(");

                for (pit = parameters.iterator(), sep = "";
                     pit.hasNext();
                     sep = ", ")
                {
                    mTarget.print(sep);
                    (pit.next()).accept(this);
                }

                mTarget.println(")\\n\");");
            }
            else
            {
                mTarget.print(indent2);
                mTarget.print("    std::ostream& str = ");
                mTarget.println("context.getDebugStream();");
                mTarget.println();
                mTarget.print(indent2);
                mTarget.print("    str << \"ENTER TRANSITION: ");
                mTarget.print(stateName);
                mTarget.print("::");
                mTarget.print(transName);
                mTarget.print("(");

                for (pit = parameters.iterator(), sep = "";
                     pit.hasNext();
                     sep = ", ")
                {
                    mTarget.print(sep);
                    (pit.next()).accept(this);
                }

                mTarget.println(")\"");
                mTarget.print(indent2);
                mTarget.println("        << std::endl;");
            }

            mTarget.print(indent2);
            mTarget.println("}");
            mTarget.println();
        }

        if (actions.size() > 0)
        {
            // Now that we are in the transition, clear the
            // current state.
            mTarget.print(indent2);
            mTarget.println("context.clearState();");
        }

        // Dump out this transition's actions.
        if (actions.isEmpty())
        {
            if (condition.length() > 0)
            {
                mTarget.print(indent2);
                mTarget.println("// No actions.");
            }

            indent3 = indent2;
        }
        else
        {
            // v. 2.0.2: Place the actions inside a try/catch
            // block. This way the state will be set before an
            // exception leaves the transition method.
            // v. 2.2.0: Check if the user has turned off this
            // feature first.
            if (mNoCatchFlag == false)
            {
                mTarget.print(indent2);
                mTarget.println("try");
                mTarget.print(indent2);
                mTarget.println("{");

                indent3 = indent2 + "    ";
            }
            else
            {
                indent3 = indent2;
            }

            indent4 = mIndent;
            mIndent = indent3;

            for (SmcAction action: actions)
            {
                action.accept(this);
            }

            mIndent = indent4;
        }

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            String transName = transition.getName();
            List<SmcParameter> parameters =
                transition.getParameters();
            Iterator<SmcParameter> pit;
            String sep;

            if (mNoCatchFlag == false &&
                actions.isEmpty() == false)
            {
                indent3 = indent2 + "    ";
            }
            else
            {
                indent3 = indent2;
            }

            mTarget.print(indent3);
            mTarget.println(
                "if (context.getDebugFlag())");
            mTarget.print(indent3);
            mTarget.println("{");

            if (mNoStreamsFlag)
            {
                mTarget.print(indent3);
                mTarget.print(
                    "    TRACE(\"EXIT TRANSITION : ");
                mTarget.print(stateName);
                mTarget.print("::");
                mTarget.print(transName);
                mTarget.print("(");

                for (pit = parameters.iterator(), sep = "";
                     pit.hasNext();
                     sep = ", ")
                {
                    mTarget.print(sep);
                    (pit.next()).accept(this);
                }

                mTarget.println(")\\n\");");
            }
            else
            {
                mTarget.print(indent3);
                mTarget.print(
                    "    std::ostream& str = ");
                mTarget.println("context.getDebugStream();");
                mTarget.println();
                mTarget.print(indent3);
                mTarget.print(
                    "    str << \"EXIT TRANSITION : ");
                mTarget.print(stateName);
                mTarget.print("::");
                mTarget.print(transName);
                mTarget.print("(");

                for (pit = parameters.iterator(), sep = "";
                     pit.hasNext();
                     sep = ", ")
                {
                    mTarget.print(sep);
                    (pit.next()).accept(this);
                }

                mTarget.println(")\"");
                mTarget.print(indent3);
                mTarget.println("        << std::endl;");
            }

            mTarget.print(indent3);
            mTarget.println("}");
            mTarget.println();
        }

        // Print the setState() call, if necessary. Do NOT
        // generate the set state if:
        // 1. The transition has no actions AND is a loopback OR
        // 2. This is a push or pop transition.
        //
        // v. 2.0.2: The following code must be generated twice -
        // once for the try body and again for the catch body.
        // Unlike Java, C++ does not have a finally clause.
        if (transType == TransType.TRANS_SET &&
            (actions.size() > 0 || loopbackFlag == false))
        {
            mTarget.print(indent3);
            mTarget.print("context.setState(");
            mTarget.print(fqEndStateName);
            mTarget.println(");");
        }
        else if (transType == TransType.TRANS_PUSH)
        {
            // Set the end state so that it can be pushed
            // onto the state stack. But only do so if a clear
            // state was done.
            if (loopbackFlag == false || actions.size() > 0)
            {
                mTarget.print(indent3);
                mTarget.print("context.setState(");
                mTarget.print(fqEndStateName);
                mTarget.println(");");
            }

            // Before doing the push, execute the end state's
            // entry actions (if any) if this is not a loopback.
            if (loopbackFlag == false)
            {
                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.println();
                    mTarget.print(indent3);
                    mTarget.println(
                        "if (context.getDebugFlag())");
                    mTarget.print(indent3);
                    mTarget.println("{");

                    if (mNoStreamsFlag)
                    {
                        mTarget.print(indent3);
                        mTarget.print(
                            "    TRACE(\"BEFORE ENTRY    : ");
                        mTarget.print(fqEndStateName);
                        mTarget.println(
                            "::Entry(context)\\n\");");
                    }
                    else
                    {
                        mTarget.print(indent3);
                        mTarget.print(
                            "    std::ostream& str = ");
                        mTarget.println("context.getDebugStream();");
                        mTarget.println();
                        mTarget.print(indent3);
                        mTarget.print(
                            "    str << \"BEFORE ENTRY    : ");
                        mTarget.print(fqEndStateName);
                        mTarget.println("::Entry(context)\"");
                        mTarget.print(indent3);
                        mTarget.println("        << std::endl;");
                    }

                    mTarget.print(indent3);
                    mTarget.println("}");
                }

                mTarget.println();
                mTarget.print(indent3);
                mTarget.println(
                    "context.getState().Entry(context);");

                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.println();
                    mTarget.print(indent3);
                    mTarget.println(
                        "if (context.getDebugFlag())");
                    mTarget.print(indent3);
                    mTarget.println("{");

                    if (mNoStreamsFlag)
                    {
                        mTarget.print(indent3);
                        mTarget.print(
                            "    TRACE(\"AFTER ENTRY     : ");
                        mTarget.print(fqEndStateName);
                        mTarget.println(
                            "::Entry(context)\\n\");");
                    }
                    else
                    {
                        mTarget.print(indent3);
                        mTarget.print(
                            "    std::ostream& str = ");
                        mTarget.println("context.getDebugStream();");
                        mTarget.println();
                        mTarget.print(indent3);
                        mTarget.print(
                            "    str << \"AFTER ENTRY     : ");
                        mTarget.print(fqEndStateName);
                        mTarget.println("::Entry(context)\"");
                        mTarget.print(indent3);
                        mTarget.println("        << std::endl;");
                    }

                    mTarget.print(indent3);
                    mTarget.println("}");
                }
            }

            mTarget.print(indent3);
            mTarget.print("context.pushState(");
            mTarget.print(pushStateName);
            mTarget.println(");");
        }
        else if (transType == TransType.TRANS_POP)
        {
            mTarget.print(indent3);
            mTarget.println("context.popState();");
        }

        // v. 2.0.2: Generate the set state, push or pop
        // code for the catch body. Note: The try body was
        // generated only if there were actions.
        // Place the try block's closing brace and open the
        // catch-all block.
        // v. 2.2.0: Check if the user has turned off this
        // feature first.
        if (actions.isEmpty() == false &&
            mNoCatchFlag == false)
        {
            mTarget.print(indent2);
            mTarget.println("}");
            mTarget.print(indent2);
            mTarget.println("catch (...)");
            mTarget.print(indent2);
            mTarget.println("{");

            if (transType == TransType.TRANS_SET)
            {
                mTarget.print(indent3);
                mTarget.print("context.setState(");
                mTarget.print(fqEndStateName);
                mTarget.println(");");
            }
            else if (transType == TransType.TRANS_PUSH)
            {
                // Set the end state so that it can be pushed
                // onto the state stack.
                mTarget.print(indent3);
                mTarget.print("context.setState(");
                mTarget.print(fqEndStateName);
                mTarget.println(");");

                // Before doing the push, execute the end state's
                // entry actions (if any) if this is not a
                // loopback.
                if (loopbackFlag == false)
                {
                    if (mDebugLevel >= DEBUG_LEVEL_1)
                    {
                        mTarget.println();
                        mTarget.print(indent3);
                        mTarget.println(
                            "if (context.getDebugFlag())");
                        mTarget.print(indent3);
                        mTarget.println("{");

                        if (mNoStreamsFlag)
                        {
                            mTarget.print(indent3);
                            mTarget.print(
                                "    TRACE(\"BEFORE ENTRY    : ");
                            mTarget.print(fqEndStateName);
                            mTarget.println(
                                "::Entry(context)\\n\");");
                        }
                        else
                        {
                            mTarget.print(indent3);
                            mTarget.print(
                                "    std::ostream& str = ");
                            mTarget.println("context.getDebugStream();");
                            mTarget.println();
                            mTarget.print(indent2);
                            mTarget.print(
                                "    str << \"BEFORE ENTRY    : ");
                            mTarget.print(fqEndStateName);
                            mTarget.println("::Entry(context)\"");
                            mTarget.print(indent2);
                            mTarget.println("        << std::endl;");
                        }

                        mTarget.print(indent3);
                        mTarget.println("}");
                        mTarget.println();
                    }

                    mTarget.println();
                    mTarget.print(indent3);
                    mTarget.println(
                        "context.getState().Entry(context);");

                    if (mDebugLevel >= DEBUG_LEVEL_1)
                    {
                        mTarget.print(indent3);
                        mTarget.println(
                            "    if (context.getDebugFlag())");
                        mTarget.print(indent3);
                        mTarget.println("    {");

                        if (mNoStreamsFlag)
                        {
                            mTarget.print(indent3);
                            mTarget.print(
                                "        TRACE(\"AFTER ENTRY     : ");
                            mTarget.print(fqEndStateName);
                            mTarget.println(
                                "::Entry(context)\\n\");");
                        }
                        else
                        {
                            mTarget.print(indent3);
                            mTarget.print(
                                "        std::ostream& str = ");
                            mTarget.println("context.getDebugStream();");
                            mTarget.println();
                            mTarget.print(indent2);
                            mTarget.print(
                                "        str << \"AFTER ENTRY     : ");
                            mTarget.print(fqEndStateName);
                            mTarget.println("::Entry(context)\"");
                            mTarget.print(indent2);
                            mTarget.println("            << std::endl;");
                        }

                        mTarget.print(indent3);
                        mTarget.println("    }");
                        mTarget.println();
                    }
                }

                mTarget.print(indent3);
                mTarget.print("context.pushState(");
                mTarget.print(pushStateName);
                mTarget.println(");");
            }
            else if (transType == TransType.TRANS_POP)
            {
                mTarget.print(indent3);
                mTarget.println("context.popState();");
            }

            // Rethrow the exception so the application can
            // handle it (or not). This is the end of the
            // catch block.
            // v. 6.0.0: Don't re-throw the exception if
            // exception throwing is turned off.
            if (mNoExceptionFlag == false)
            {
                mTarget.print(indent3);
                mTarget.println("throw;");
                mTarget.print(indent2);
            }
            mTarget.println("}");
        }

        // Perform the new state's entry actions.
        // v. 1.0, beta 3: Not any more. The entry actions are
        // executed only if 1) this is a standard, non-loopback
        // transition or a push transition.
        if ((transType == TransType.TRANS_SET &&
             loopbackFlag == false) ||
             transType == TransType.TRANS_PUSH)
        {
            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println(
                    "if (context.getDebugFlag())");
                mTarget.print(indent2);
                mTarget.println("{");

                if (mNoStreamsFlag)
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    TRACE(\"BEFORE ENTRY    : ");
                    mTarget.print(fqEndStateName);
                    mTarget.println(
                        "::Entry(context)\\n\");");
                }
                else
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    std::ostream& str = ");
                    mTarget.println("context.getDebugStream();");
                    mTarget.println();
                    mTarget.print(indent2);
                    mTarget.print(
                        "    str << \"BEFORE ENTRY    : ");
                    mTarget.print(fqEndStateName);
                    mTarget.println("::Entry(context)\"");
                    mTarget.print(indent2);
                    mTarget.println("        << std::endl;");
                }

                mTarget.print(indent2);
                mTarget.println("}");
            }

            mTarget.print(indent2);
            mTarget.println(
                "context.getState().Entry(context);");

            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.println();
                mTarget.print(indent2);
                mTarget.println(
                    "if (context.getDebugFlag())");
                mTarget.print(indent2);
                mTarget.println("{");

                if (mNoStreamsFlag)
                {
                    mTarget.print(indent2);
                    mTarget.print(
                        "    TRACE(\"AFTER ENTRY     : ");
                    mTarget.print(fqEndStateName);
                    mTarget.println(
                        "::Entry(context)\\n\");");
                }
                else
                {
                    mTarget.print(indent2);
                    mTarget.print("    std::ostream& str = ");
                    mTarget.println("context.getDebugStream();");
                    mTarget.println();
                    mTarget.print(indent2);
                    mTarget.print(
                        "    str << \"AFTER ENTRY     : ");
                    mTarget.print(fqEndStateName);
                    mTarget.println("::Entry(context)\"");
                    mTarget.print(indent2);
                    mTarget.println("        << std::endl;");
                }

                mTarget.print(indent2);
                mTarget.println("}");
                mTarget.println();
            }
        }

        // If there is a transition associated with the pop, then
        // issue that transition here.
        if (transType == TransType.TRANS_POP &&
            endStateName.equals(SmcElement.NIL_STATE) == false &&
            endStateName.length() > 0)
        {
            String popArgs = guard.getPopArgs();

            mTarget.print(indent2);
            mTarget.print("context.");
            mTarget.print(endStateName);
            mTarget.print("(");

            // Output any and all pop arguments.
            if (popArgs.length() > 0)
            {
                mTarget.print(popArgs);
            }
            mTarget.println(");");
        }

        // If this is a guarded transition, it will be necessary
        // to close off the "if" body. DON'T PRINT A NEW LINE!
        // Why? Because an "else" or "else if" may follow and we
        // won't know until we go back to the transition target
        // generator whether all clauses have been done.
        if (mGuardCount > 1)
        {
            mTarget.print(mIndent);
            mTarget.print("    }");
        }

        return;
    } // end of visit(SmcGuard)

    /**
     * Emits C++ code for this FSM action.
     * @param action emits C++ code for this action.
     */
    @Override
    public void visit(SmcAction action)
    {
        String name = action.getName();
        Iterator<String> it;
        String sep;

        // Need to distinguish between FSMContext actions and
        // application class actions. If the action is
        // "emptyStateStack", then pass it to the context.
        // Otherwise, let the application class handle it.
        mTarget.print(mIndent);
        if (action.isEmptyStateStack())
        {
            mTarget.println("context.emptyStateStack();");
        }
        else
        {
        	if ( action.isStatic() == false )
        	{
	            mTarget.print("ctxt.");
        	}

	        mTarget.print(name);
	        mTarget.print('(');

	        for (it = action.getArguments().iterator(), sep = "";
	             it.hasNext();
	             sep = ", ")
	        {
	            mTarget.print(sep);
	            mTarget.print(it.next());
	        }
	        mTarget.println(");");
        }


        return;
    } // end of visit(SmcAction)

    /**
     * Emits C++ code for this transition parameter.
     * @param parameter emits C++ code for this transition parameter.
     */
    @Override
    public void visit(SmcParameter parameter)
    {
        mTarget.print(parameter.getType());
        mTarget.print(" ");
        mTarget.print(parameter.getName());

        return;
    } // end of visit(SmcParameter)

    //
    // end of SmcVisitor Abstract Method Impelementation.
    //-----------------------------------------------------------

//---------------------------------------------------------------
// Member data
//

} // end of class SmcCppGenerator

//
// CHANGE LOG
// Log: SmcCppGenerator.java,v
// Revision 1.16  2015/02/16 21:43:09  cwrapp
// SMC v. 6.5.0
//
// SMC - The State Machine Compiler v. 6.5.0
//
// Major changes:
//
// (Java)
//     Added a new "-java7" target language. This version represents
//     the FSM as a transition table. The transition table maps the
//     current state and the transition to a
//     java.lang.invoke.MethodHandle. The transition is executed by
//     calling MethodHandle.invokeExact, which is only slightly
//     slower than a compiled method call.
//
//     The -java7 generated code is compatible with -java generated
//     code. This allows developers to switch between the two
//     without changing application code.
//
//     NOTE: -java7 requires Java 1.7 or latter to run.
//
//
// Minor changes:
//
// (None.)
//
//
// Bug Fixes:
//
// (Objective-C)
//     Incorrect initWithOwner body generated. Same fundamental
//     problem as SF bug 200. See below.
//     (SF bug 198)
//
// (Website)
//     Corrected broken link in FAQ page.
//     (SF bug 199)
//
// (C++)
//     Corrected the invalid generated FSM class name.
//     (SF bug 200)
//
// (C)
//     EXIT_STATE() #define macro not generated.
//     (SF bug 201)
//
// (Manual)
//     Corrected examples which showed %fsmclass and %map set to the
//     same name. This is invalid for most target languages since
//     that would mean the nested map class would have the same name
//     as the containing FSM class.
//
//
//
// ++++++++++++++++++++++++++++++++++++++++
//
// If you have any questions or bugs, please surf
// over to http://smc.sourceforge.net and check out
// the discussion and bug forums. Note: you must be
// a SourceForge member to add articles or bugs. You
// do not have to be a member to read posted
// articles or bugs.
//
// Revision 1.15  2014/09/28 15:41:19  cwrapp
// SMC 6.4.0 release.
//
// Revision 1.14  2014/09/13 06:25:32  fperrad
// refactor C++ generation
//
// Revision 1.13  2013/07/14 14:32:38  cwrapp
// check in for release 6.2.0
//
// Revision 1.12  2012/05/13 16:31:10  fperrad
// fix 3525846 : endless recursion with guarded transitions in Default state
//
// Revision 1.11  2011/11/20 14:58:33  cwrapp
// Check in for SMC v. 6.1.0
//
// Revision 1.10  2010/09/11 19:15:57  fperrad
// remove \r from debug message
//
// Revision 1.9  2010/02/15 18:05:43  fperrad
// fix 2950619 : make distinction between target filename (*.sm) and target filename.
//
// Revision 1.8  2009/12/17 19:51:43  cwrapp
// Testing complete.
//
// Revision 1.7  2009/11/25 22:30:19  cwrapp
// Fixed problem between %fsmclass and sm file names.
//
// Revision 1.6  2009/11/24 20:42:39  cwrapp
// v. 6.0.1 update
//
// Revision 1.5  2009/10/06 15:31:59  kgreg99
// 1. Started implementation of feature request #2718920.
//     1.1 Added method boolean isStatic() to SmcAction class. It returns false now, but is handled in following language generators: C#, C++, java, php, VB. Instance identificator is not added in case it is set to true.
// 2. Resolved confusion in "emtyStateStack" keyword handling. This keyword was not handled in the same way in all the generators. I added method boolean isEmptyStateStack() to SmcAction class. This method is used instead of different string comparisons here and there. Also the generated method name is fixed, not to depend on name supplied in the input sm file.
//
// Revision 1.4  2009/09/12 21:44:49  kgreg99
// Implemented feature req. #2718941 - user defined generated class name.
// A new statement was added to the syntax: %fsmclass class_name
// It is optional. If not used, generated class is called as before "XxxContext" where Xxx is context class name as entered via %class statement.
// If used, generated class is called asrequested.
// Following language generators are touched:
// c, c++, java, c#, objc, lua, groovy, scala, tcl, VB
// This feature is not tested yet !
// Maybe it will be necessary to modify also the output file name.
//
// Revision 1.3  2009/09/05 15:39:20  cwrapp
// Checking in fixes for 1944542, 1983929, 2731415, 2803547 and feature 2797126.
//
// Revision 1.2  2009/03/27 09:41:47  cwrapp
// Added F. Perrad changes back in.
//
// Revision 1.1  2009/03/01 18:20:42  cwrapp
// Preliminary v. 6.0.0 commit.
//
//
