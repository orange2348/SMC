//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2005, 2008 - 2009, 2019. Charles W. Rapp.
// All Rights Reserved.
//
// Port to Lua by Francois Perrad, francois.perrad@gadz.org
// Copyright 2007-2009, Francois Perrad.
// All Rights Reserved.
//
// Contributor(s):
//   Eitan Suez contributed examples/Ant.
//   (Name withheld) contributed the C# code generation and
//   examples/C#.
//   Francois Perrad contributed the Python code generation and
//   examples/Python.
//
// RCS ID
// $Id: SmcLuaGenerator.java,v 1.20 2015/04/24 18:25:24 fperrad Exp $
//
// CHANGE LOG
// (See the bottom of this file.)
//

package net.sf.smc.generator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import net.sf.smc.model.SmcAction;
import net.sf.smc.model.SmcElement;
import net.sf.smc.model.SmcElement.TransType;
import net.sf.smc.model.SmcFSM;
import net.sf.smc.model.SmcGuard;
import net.sf.smc.model.SmcMap;
import net.sf.smc.model.SmcParameter;
import net.sf.smc.model.SmcState;
import net.sf.smc.model.SmcTransition;
import net.sf.smc.model.SmcVisitor;
import net.sf.smc.model.TargetLanguage;

/**
 * Visits the abstract syntax tree, emitting Lua code.
 * @see SmcElement
 * @see SmcCodeGenerator
 * @see SmcVisitor
 * @see SmcOptions
 *
 * @author Francois Perrad
 */

public final class SmcLuaGenerator
    extends SmcCodeGenerator
{
//---------------------------------------------------------------
// Member data
//

//---------------------------------------------------------------
// Member methods
//

    //-----------------------------------------------------------
    // Constructors.
    //

    /**
     * Creates a Lua code generator for the given options.
     * @param options command line options.
     */
    public SmcLuaGenerator(final SmcOptions options)
    {
        super (options, TargetLanguage.LUA.suffix());
    } // end of SmcLuaGenerator(SmcOptions)

    //
    // end of Constructors.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // SmcVisitor Abstract Method Impelementation.
    //

    /**
     * Emits Lua code for the finite state machine.
     * @param fsm emit Lua code for this finite state machine.
     */
    @Override
    public void visit(final SmcFSM fsm)
    {
        String context = fsm.getContext();
        String fsmClassName = fsm.getFsmClassName();
        String rawSource = fsm.getSource();
        String startState = fsm.getStartState();
        String luaState;
        List<SmcMap> maps = fsm.getMaps();
        List<SmcTransition> transitions;
        List<SmcParameter> params;
        String mapName;
        String transName;
        int index;

        mTarget.println("-- ex: set ro:");
        mTarget.println("-- DO NOT EDIT.");
        mTarget.println("-- generated by smc (http://smc.sourceforge.net/)");
        mTarget.print("-- from file : ");
        mTarget.print(mSrcfileBase);
        mTarget.println(".sm");
        mTarget.println();

        mTarget.println("local error = error");
        if (mNoCatchFlag == false)
        {
            mTarget.println("local pcall = pcall");
        }
        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.println("local tostring = tostring");
        }
        mTarget.println("local strformat = require 'string'.format");
        mTarget.println();
        mTarget.println("local statemap = require 'statemap'");

        // Dump out the raw target code, if any.
        if (rawSource != null && rawSource.length () > 0)
        {
            mTarget.println(rawSource);
            mTarget.println();
        }

        // Do user-specified imports now.
        for (String imp: fsm.getImports())
        {
            mTarget.print("require '");
            mTarget.print(imp);
            mTarget.println("'");
        }

        mTarget.println();
        mTarget.println("local _ENV = nil");

        // Declare the inner state class.
        mTarget.println();
        mTarget.print("local ");
        mTarget.print(context);
        mTarget.println("State = statemap.State.class()");
        mTarget.println();

        mTarget.println("local function _empty ()");
        mTarget.println("end");
        mTarget.print(context);
        mTarget.println("State.Entry = _empty");
        mTarget.print(context);
        mTarget.println("State.Exit = _empty");
        mTarget.println();

        mTarget.println("local function _default (self, fsm)");
        mTarget.println("    self:Default(fsm)");
        mTarget.println("end");

        // Get the transition list.
        // Generate the default transition definitions.
        transitions = fsm.getTransitions();
        for (SmcTransition trans: transitions)
        {
            // Don't generate the Default transition here.
            if (trans.getName().equals("Default") == false)
            {
                mTarget.print(context);
                mTarget.print("State.");
                mTarget.print(trans.getName());
                mTarget.println(" = _default");
            }
        }

        // Generate the overall Default transition for all maps.
        mTarget.println();
        mTarget.print("function ");
        mTarget.print(context);
        mTarget.println("State:Default (fsm)");

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.println(
                "    if fsm.debugFlag then");
            mTarget.println(
                "        fsm.debugStream:write(\"TRANSITION   : Default\\n\")");
            mTarget.println("    end");
        }

        mTarget.println(
            "    local msg = strformat(\"Undefined Transition\\nState: %s\\nTransition: %s\\n\",");
        mTarget.println(
            "                          fsm:getState().name,");
        mTarget.println(
            "                          fsm.transition)");
        mTarget.println("    error(msg)");
        mTarget.println("end");

        // Generate the getTransitions() method.
        if (mReflectFlag)
        {
            mTarget.println();
            mTarget.print("function ");
            mTarget.print(context);
            mTarget.println("State:getTransitions ()");
            mTarget.println("    return self._transitions");
            mTarget.println("end");
        }

        // End of context class.

        // Declare each map.
        mTarget.println();
        for (SmcMap map: maps)
        {
            mapName = map.getName();

            mTarget.print("local ");
            mTarget.print(mapName);
            mTarget.println(" = {}");
        }

        // Have each map print out its target code now.
        for (SmcMap map: maps)
        {
            map.accept(this);
        }

        // The context class contains all the state classes as
        // inner classes, so generate the context first rather
        // than last.
        mTarget.println();
        mTarget.print("local ");
        mTarget.print(fsmClassName);
        mTarget.println(" = statemap.FSMContext.class()");

        // Generate the context class' init.
        mTarget.println();
        mTarget.print("function ");
        mTarget.print(fsmClassName);
        mTarget.println(":_init ()");

        // The state name "map::state" must be changed to
        // "map.state".
        if ((index = startState.indexOf("::")) >= 0)
        {
            luaState =
                startState.substring(0, index) +
                "." +
                startState.substring(index + 2);
        }
        else
        {
            luaState = startState;
        }

        mTarget.print("    self:setState(");
        mTarget.print(luaState);
        mTarget.println(")");

        mTarget.println("end");
        mTarget.println();

        // Generate the transition methods.
        for (SmcTransition trans: transitions)
        {
            transName = trans.getName();
            params = trans.getParameters();

            if (transName.equals("Default") == false)
            {
                mTarget.print("function ");
                mTarget.print(fsmClassName);
                mTarget.print(":");
                mTarget.print(transName);
                mTarget.print(" (");
                if (!params.isEmpty())
                {
                    mTarget.print("...");
                }
                mTarget.println(")");

                // Save away the transition name in case it is
                // need in an UndefinedTransitionException.
                mTarget.print("    self.transition = '");
                mTarget.print(transName);
                mTarget.println("'");

                mTarget.print("    self:getState():");
                mTarget.print(transName);
                mTarget.print("(self");
                if (!params.isEmpty())
                {
                    mTarget.print(", ...");
                }
                mTarget.println(")");

                mTarget.println("    self.transition = nil");

                mTarget.println("end");
                mTarget.println();
            }
        }

        // enterStartState()
        // Execute the start state's entry actions.
        mTarget.print("function ");
        mTarget.print(fsmClassName);
        mTarget.println(":enterStartState ()");
        mTarget.println("    self:getState():Entry(self)");
        mTarget.println("end");
        mTarget.println();

        if (mReflectFlag)
        {
            // getStates() method.
            mTarget.print(fsmClassName);
            mTarget.println("._States = {");
            for (SmcMap map: maps)
            {
                mapName = map.getName();

                for (SmcState state: map.getStates())
                {
                    mTarget.print("    ");
                    mTarget.print(mapName);
                    mTarget.print(".");
                    mTarget.print(state.getClassName());
                    mTarget.println(",");
                }
            }
            mTarget.println("}");
            mTarget.print("function ");
            mTarget.print(fsmClassName);
            mTarget.println(":getStates ()");
            mTarget.println("    return self._States");
            mTarget.println("end");
            mTarget.println();

            // getTransitions() method.
            mTarget.print(fsmClassName);
            mTarget.println("._transitions = {");
            for (SmcTransition trans: transitions)
            {
                mTarget.print("    '");
                mTarget.print(trans.getName());
                mTarget.println("',");
            }
            mTarget.println("}");
            mTarget.print("function ");
            mTarget.print(fsmClassName);
            mTarget.println(":getTransitions ()");
            mTarget.println("    return self._transitions");
            mTarget.println("end");
            mTarget.println();
        }

        mTarget.println("return ");
        mTarget.print(fsmClassName);
        mTarget.println();

        mTarget.println("-- Local variables:");
        mTarget.println("--  buffer-read-only: t");
        mTarget.println("-- End:");

        return;
    } // end of visiti(SmcFSM)

    @Override
    public void visit(final SmcMap map)
    {
        List<SmcTransition> definedDefaultTransitions;
        SmcState defaultState = map.getDefaultState();
        String context = map.getFSM().getContext();
        String mapName = map.getName();
        List<SmcState> states = map.getStates();

        // Initialize the default transition list to all the
        // default state's transitions.
        if (defaultState != null)
        {
            definedDefaultTransitions =
                defaultState.getTransitions();
        }
        else
        {
            definedDefaultTransitions = new ArrayList<>();
        }

        // Declare the map default state class.
        mTarget.println();
        mTarget.print(mapName);
        mTarget.print(".Default = ");
        mTarget.print(context);
        mTarget.print("State:new('");
        mTarget.print(mapName);
        mTarget.println(".Default', -1)");

        // Declare the user-defined default transitions first.
        for (SmcTransition transition: definedDefaultTransitions)
        {
            transition.accept(this);
        }

        // If -reflect was specified, then generate the
        // _transitions table.
        if (mReflectFlag)
        {
            List<SmcTransition> allTransitions =
                map.getFSM().getTransitions();
            String transName;
            int transDefinition;

            // Now output the transition collection's
            // initialization.
            mTarget.println();
            mTarget.print(mapName);
            mTarget.println(".Default._transitions = {");

            // Now place all transition names and states into the
            // map.
            for (SmcTransition transition: allTransitions)
            {
                transName = transition.getName();

                // If the transition is defined in this map's
                // default state, then the value is 2.
                if (definedDefaultTransitions.contains(transition))
                {
                    transDefinition = 2;
                }
                // Otherwise the value is 0 - undefined.
                else
                {
                    transDefinition = 0;
                }

                mTarget.print("    ");
                mTarget.print(transName);
                mTarget.print(" = ");
                mTarget.print(transDefinition);
                mTarget.println(",");
            }
            mTarget.println("}");
        }

        // Have each state now generate its code. Each state
        // class is an inner class.
        for (SmcState state: states)
        {
            state.accept(this);
        }

        return;
    } // end of visit(SmcMap)

    /**
     * Emits Lua code for this FSM state.
     * @param state emits Lua code for this state.
     */
    @Override
    public void visit(final SmcState state)
    {
        SmcMap map = state.getMap();
        String mapName = map.getName();
        String stateName = state.getClassName();
        List<SmcAction> actions;
        String indent2;

        // Declare the inner state class.
        mTarget.println();
        mTarget.print(mapName);
        mTarget.print('.');
        mTarget.print(stateName);
        mTarget.print(" = ");
        mTarget.print(mapName);
        mTarget.print(".Default:new('");
        mTarget.print(mapName);
        mTarget.print('.');
        mTarget.print(stateName);
        mTarget.print("', ");
        mTarget.print(SmcMap.getNextStateId());
        mTarget.println(")");

        // Add the Entry() and Exit() member functions if this
        // state defines them.
        actions = state.getEntryActions();
        if (actions != null && actions.size() > 0)
        {
            mTarget.println();
            mTarget.print("function ");
            mTarget.print(mapName);
            mTarget.print('.');
            mTarget.print(stateName);
            mTarget.println(":Entry (fsm)");

            // Declare the "ctxt" local variable.
            mTarget.println("    local ctxt = fsm.owner");

            // Generate the actions associated with this code.
            indent2 = mIndent;
            mIndent += "    ";
            for (SmcAction action: actions)
            {
                action.accept(this);
            }
            mIndent = indent2;

            // End the Entry() member function with a return.
            mTarget.println("end");
        }

        actions = state.getExitActions();
        if (actions != null && actions.size() > 0)
        {
            mTarget.println();
            mTarget.print("function ");
            mTarget.print(mapName);
            mTarget.print('.');
            mTarget.print(stateName);
            mTarget.println(":Exit (fsm)");

            // Declare the "ctxt" local variable.
            mTarget.print(mIndent);
            mTarget.println("    local ctxt = fsm.owner");

            // Generate the actions associated with this code.
            indent2 = mIndent;
            mIndent += "    ";
            for (SmcAction action: actions)
            {
                action.accept(this);
            }
            mIndent = indent2;

            // End the Exit() member function with a return.
            mTarget.print(mIndent);
            mTarget.println("end");
        }

        // Have each transition generate its code.
        for (SmcTransition transition: state.getTransitions())
        {
            transition.accept(this);
        }

        // If -reflect was specified, then generate the
        // _transitions table.
        if (mReflectFlag)
        {
            List<SmcTransition> allTransitions =
                map.getFSM().getTransitions();
            List<SmcTransition> stateTransitions =
                state.getTransitions();
            SmcState defaultState = map.getDefaultState();
            List<SmcTransition> defaultTransitions;
            String transName;
            int transDefinition;

            // Initialize the default transition list to all the
            // default state's transitions.
            if (defaultState != null)
            {
                defaultTransitions =
                    defaultState.getTransitions();
            }
            else
            {
                defaultTransitions = new ArrayList<>();
            }

            // Now output the transition collection's
            // initialization.
            mTarget.println();
            mTarget.print(mapName);
            mTarget.print(".");
            mTarget.print(stateName);
            mTarget.println("._transitions = {");

            // Now place all transition names and states into the
            // map.
            for (SmcTransition transition: allTransitions)
            {
                transName = transition.getName();

                // If the transition is in this state, then its
                // value is 1.
                if (stateTransitions.contains(transition))
                {
                    transDefinition = 1;
                }
                // If the transition is defined in this map's
                // default state, then the value is 2.
                else if (defaultTransitions.contains(transition))
                {
                    transDefinition = 2;
                }
                // Otherwise the value is 0 - undefined.
                else
                {
                    transDefinition = 0;
                }

                mTarget.print("    ");
                mTarget.print(transName);
                mTarget.print(" = ");
                mTarget.print(transDefinition);
                mTarget.println(",");
            }
            mTarget.println("}");
        }

        return;
    } // end of visit(SmcState)

    /**
     * Emits Lua code for this FSM state transition.
     * @param transition emits Lua code for this state transition.
     */
    @Override
    public void visit(final SmcTransition transition)
    {
        SmcState state = transition.getState();
        SmcMap map = state.getMap();
        String mapName = map.getName();
        String stateName = state.getClassName();
        String instanceName = state.getInstanceName();
        String transName = transition.getName();
        List<SmcParameter> parameters =
            transition.getParameters();
        List<SmcGuard> guards = transition.getGuards();
        SmcGuard nullGuard = null;
        Iterator<SmcGuard> git = guards.iterator();
        SmcGuard guard;
        String indent2;

        mTarget.println();
        mTarget.print("function ");
        mTarget.print(mapName);
        mTarget.print('.');
        mTarget.print(stateName);
        mTarget.print(':');
        mTarget.print(transName);
        mTarget.print(" (fsm");

        // Add user-defined parameters.
        for (SmcParameter param: parameters)
        {
            mTarget.print(", ");
            mTarget.print(param.getName());
        }
        mTarget.println(")");

        // All transitions have a "ctxt" local variable.
        // 8/14/2003:
        // Do this only if there are any transition actions or
        // guard conditions which reference it.
        if (transition.hasCtxtReference())
        {
            mTarget.println("    local ctxt = fsm.owner");
        }

        // Output transition to debug stream.
        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.println(
                "    if fsm.debugFlag then");
            mTarget.print(
                "        fsm.debugStream:write(");
            mTarget.print("\"LEAVING STATE   : ");
            mTarget.print(mapName);
            mTarget.print(".");
            mTarget.print(stateName);
            mTarget.println("\\n\")");
            mTarget.println("    end");
        }

        // Loop through the guards and print each one.
        indent2 = mIndent;
        mIndent += "    ";
        mGuardIndex = 0;
        mGuardCount = guards.size();
        while (git.hasNext())
        {
            guard = git.next();

            // Output the no condition guard *after* all other
            // guarded transitions.
            if ((guard.getCondition()).isEmpty())
            {
                nullGuard = guard;
            }
            else
            {
                guard.accept(this);
                ++mGuardIndex;
            }
        }
        mIndent = indent2;

        // Is there an explicitly defined unguarded transition?
        if (nullGuard != null)
        {
            // Does this guard have any actions or is this guard
            // *not* an internal loopback transition?
            if (nullGuard.hasActions() ||
                !(nullGuard.getEndState()).equals(SmcElement.NIL_STATE) ||
                nullGuard.getTransType() == TransType.TRANS_PUSH ||
                nullGuard.getTransType() == TransType.TRANS_POP)
            {
                // Need to output either the action and/or the
                // next state, so output the guard..
                indent2 = mIndent;
                mIndent += "    ";

                nullGuard.accept(this);

                mIndent = indent2;
            }

            mTarget.println();
        }
        // If all guards have a condition, then create a final
        // "else" clause which passes control to the default
        // transition. Pass all arguments into the default
        // transition.
        else if (mGuardIndex > 0)
        {
            // Need to add a final newline after a multiguard block.
            if (mGuardCount > 1)
            {
                mTarget.print(mIndent);
                mTarget.println("    end");
            }

            mTarget.print(mIndent);
            mTarget.println("    else");

            // Call the super class' transition method
            mTarget.print(mIndent);
            mTarget.print("        ");
            mTarget.print(mapName);
            mTarget.print(".Default:");
            if (instanceName.equals("DefaultState") == false)
            {
                mTarget.print(transName);
                mTarget.print("(fsm");

                // Add user-defined parameters.
                for (SmcParameter param: parameters)
                {
                    mTarget.print(", ");
                    mTarget.print(param.getName());
                }
            }
            else
            {
                mTarget.print("Default(fsm");
            }
            mTarget.println(")");
            mTarget.print(mIndent);
            mTarget.println("    end");
        }

        mTarget.println("end");

        return;
    } // end of visit(SmcTransition)

    /**
     * Emits Lua code for this FSM transition guard.
     * @param guard emits Lua code for this transition guard.
     */
    @Override
    public void visit(final SmcGuard guard)
    {
        SmcTransition transition = guard.getTransition();
        SmcState state = transition.getState();
        SmcMap map = state.getMap();
        String packageName = map.getFSM().getPackage();
        String mapName = map.getName();
        String stateName = state.getClassName();
        String transName = transition.getName();
        TransType transType = guard.getTransType();
        boolean loopbackFlag;
        String indent2;
        String indent3;
        String indent4;
        String endStateName = guard.getEndState();
        String fqEndStateName = "";
        String pushStateName = guard.getPushState();
        String condition = guard.getCondition();
        List<SmcAction> actions = guard.getActions();

        // If this guard's end state is not of the form
        // "map::state", then prepend the map name to the
        // state name.
        // DON'T DO THIS IF THIS IS A POP TRANSITION!
        // The "state" is actually a transition name.
        if (transType != TransType.TRANS_POP &&
            endStateName.length () > 0 &&
            endStateName.equals(SmcElement.NIL_STATE) == false)
        {
            endStateName = scopeStateName(endStateName, mapName);
        }

        // Qualify the state and push state names as well.
        stateName = scopeStateName(stateName, mapName);
        pushStateName = scopeStateName(pushStateName, mapName);

        loopbackFlag = isLoopback(transType, endStateName);

        // The guard code generation is a bit tricky. The first
        // question is how many guards are there? If there are
        // more than one, then we will need to generate the
        // proper "if-then-else" code.
        if (mGuardCount > 1)
        {
            indent2 = mIndent + "    ";

            // There are multiple guards.
            // Is this the first guard?
            if (mGuardIndex == 0 && condition.length() > 0)
            {
                // Yes, this is the first. This means an "if"
                // should be used.
                mTarget.print(mIndent);
                mTarget.print("if ");
                mTarget.print(condition);
                mTarget.println(" then");
            }
            else if (condition.length() > 0)
            {
                // No, this is not the first transition but it
                // does have a condition. Use an "else if".
                mTarget.print(mIndent);
                mTarget.print("elseif ");
                mTarget.print(condition);
                mTarget.println(" then");
            }
            else
            {
                // This is not the first transition and it has
                // no condition.
                mTarget.print(mIndent);
                mTarget.println("else");
            }
        }
        // There is only one guard. Does this guard have
        // a condition?
        else if (condition.length() == 0)
        {
            // No. This is a plain, old. vanilla transition.
            indent2 = mIndent;
        }
        else
        {
            // Yes there is a condition.
            indent2 = mIndent + "        ";

            mTarget.print(mIndent);
            mTarget.print("    if ");
            mTarget.print(condition);
            mTarget.println(" then");
        }

        // Now that the necessary conditions are in place, it's
        // time to dump out the transition's actions. First, do
        // the proper handling of the state change. If this
        // transition has no actions, then set the end state
        // immediately. Otherwise, unset the current state so
        // that if an action tries to issue a transition, it will
        // fail.
        if (actions.isEmpty() && !endStateName.isEmpty())
        {
            fqEndStateName = endStateName;
        }
        else if (actions.size() > 0)
        {
            // Save away the current state if this is a loopback
            // transition. Storing current state allows the
            // current state to be cleared before any actions are
            // executed. Remember: actions are not allowed to
            // issue transitions and clearing the current state
            // prevents them from doing do.
            if (loopbackFlag)
            {
                fqEndStateName = "endState";

                mTarget.print(indent2);
                mTarget.print("local ");
                mTarget.print(fqEndStateName);
                mTarget.println(" = fsm:getState()");
            }
            else
            {
                fqEndStateName = endStateName;
            }
        }

        // Dump out the exit actions - but only for the first
        // guard.
        // v. 1.0, beta 3: Not any more. The exit actions are
        // executed only if 1) this is a standard, non-loopback
        // transition or a pop transition.
        if (transType == TransType.TRANS_POP ||
            loopbackFlag == false)
        {
            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println("if fsm.debugFlag then");
                mTarget.print(indent2);
                mTarget.print(
                    "    fsm.debugStream:write(\"");
                mTarget.print("BEFORE EXIT     : ");
                if (packageName != null &&
                    packageName.length() > 0)
                {
                    mTarget.print(packageName);
                    mTarget.print(".");
                }
                mTarget.print(stateName);
                mTarget.println(".Exit(fsm)\\n\")");
                mTarget.print(indent2);
                mTarget.println("end");
            }

            mTarget.print(indent2);
            mTarget.println("fsm:getState():Exit(fsm)");

            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println("if fsm.debugFlag then");
                mTarget.print(indent2);
                mTarget.print(
                    "    fsm.debugStream:write(\"");
                mTarget.print("AFTER EXIT      : ");
                if (packageName != null &&
                    packageName.length() > 0)
                {
                    mTarget.print(packageName);
                    mTarget.print(".");
                }
                mTarget.print(stateName);
                mTarget.println(".Exit(fsm)\\n\")");
                mTarget.print(indent2);
                mTarget.println("end");
            }
        }

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            List<SmcParameter> parameters =
                transition.getParameters();
            Iterator<SmcParameter> pit;
            String trArgName;
            String sep;

            mTarget.print(indent2);
            mTarget.println("if fsm.debugFlag then");
            mTarget.print(indent2);
            mTarget.print(
                "    fsm.debugStream:write(\"");
            mTarget.print("ENTER TRANSITION: ");
            if (packageName != null && packageName.length() > 0)
            {
                mTarget.print(packageName);
                mTarget.print(".");
            }
            mTarget.print(stateName);
            mTarget.print(":");
            mTarget.print(transName);

            mTarget.print("(");
            for (pit = parameters.iterator(), sep = "";
                 pit.hasNext();
                 sep = ", ")
            {
                trArgName = (pit.next()).getName();

                mTarget.print(sep);
                mTarget.print(trArgName);
                mTarget.print("=\" .. tostring(");
                mTarget.print(trArgName);
                mTarget.print(") .. \"");
            }
            mTarget.print(")");

            mTarget.println("\\n\")");
            mTarget.print(indent2);
            mTarget.println("end");
        }

        // Dump out this transition's actions.
        if (actions.isEmpty())
        {
            if (condition.length() > 0)
            {
                mTarget.print(indent2);
                mTarget.println("-- No actions.");
            }
        }
        else
        {
            // Now that we are in the transition, clear the
            // current state.
            mTarget.print(indent2);
            mTarget.println("fsm:clearState()");

            // v. 2.0.0: Place the actions inside a try/finally
            // block. This way the state will be set before an
            // exception leaves the transition method.
            // v. 2.2.0: Check if the user has turned off this
            // feature first.
            if (mNoCatchFlag == false)
            {
                mTarget.print(indent2);
                mTarget.println("local r, msg = pcall(");
                mTarget.print(indent2);
                mTarget.println("    function ()");

                indent3 = indent2 + "        ";
            }
            else
            {
                indent3 = indent2;
            }

            indent4 = mIndent;
            mIndent = indent3;

            for (SmcAction action: actions)
            {
                action.accept(this);
            }

            mIndent = indent4;

            // v. 2.2.0: Check if the user has turned off this
            // feature first.
            if (mNoCatchFlag == false)
            {
                mTarget.print(indent2);
                mTarget.println("    end");
                mTarget.print(indent2);
                mTarget.println(")");

                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.print(indent2);
                    mTarget.println("if not r then");
                    mTarget.print(indent2);
                    mTarget.println("    fsm.debugStream:write(msg)");
                    mTarget.print(indent2);
                    mTarget.println("end");
                }
            }
        }

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            List<SmcParameter> parameters =
                transition.getParameters();
            Iterator<SmcParameter> pit;
            String trArgName;
            String sep;

            mTarget.print(indent2);
            mTarget.println("if fsm.debugFlag then");
            mTarget.print(indent2);
            mTarget.print("    fsm.debugStream:write(\"");
            mTarget.print("EXIT TRANSITION : ");
            if (packageName != null &&
                packageName.length() > 0)
            {
                mTarget.print(packageName);
                mTarget.print(".");
            }
            mTarget.print(stateName);
            mTarget.print(":");
            mTarget.print(transName);

            mTarget.print("(");
            for (pit = parameters.iterator(), sep = "";
                 pit.hasNext();
                 sep = ", ")
            {
                trArgName = (pit.next()).getName();

                mTarget.print(sep);
                mTarget.print(trArgName);
                mTarget.print("=\" .. tostring(");
                mTarget.print(trArgName);
                mTarget.print(") .. \"");
            }
            mTarget.print(")");

            mTarget.println("\\n\")");
            mTarget.print(indent2);
            mTarget.println("end");
        }

        // Print the setState() call, if necessary. Do NOT
        // generate the set state it:
        // 1. The transition has no actions AND is a loopback OR
        // 2. This is a push or pop transition.
        if (transType == TransType.TRANS_SET &&
            (actions.size() > 0 || loopbackFlag == false))
        {
            mTarget.print(indent2);
            mTarget.print("fsm:setState(");
            mTarget.print(fqEndStateName);
            mTarget.println(")");
        }
        else if (transType == TransType.TRANS_PUSH)
        {
            // Set the next state so this it can be pushed
            // onto the state stack. But only do so if a clear
            // state was done.
            if (loopbackFlag == false || actions.size() > 0)
            {
                mTarget.print(indent2);
                mTarget.print("fsm:setState(");
                mTarget.print(fqEndStateName);
                mTarget.println(")");
            }

            // Before doing the push, execute the end state's
            // entry actions (if any) if this is not a loopback.
            if (loopbackFlag == false)
            {
                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.print(indent2);
                    mTarget.println(
                        "if fsm.debugFlag then");
                    mTarget.print(indent2);
                    mTarget.print(
                        "    fsm.debugStream:write(\"");
                    mTarget.print("BEFORE ENTRY    : ");
                    if (packageName != null &&
                        packageName.length() > 0)
                    {
                        mTarget.print(packageName);
                        mTarget.print(".");
                    }
                    mTarget.print(fqEndStateName);
                    mTarget.println(":Entry(fsm)\\n\")");
                    mTarget.print(indent2);
                    mTarget.println("end");
                }

                mTarget.print(indent2);
                mTarget.println("fsm:getState():Entry(fsm)");

                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.print(indent2);
                    mTarget.println(
                        "if fsm.debugFlag then");
                    mTarget.print(indent2);
                    mTarget.print(
                        "    fsm.debugStream:write(\"");
                    mTarget.print("AFTER ENTRY     : ");
                    if (packageName != null &&
                        packageName.length() > 0)
                    {
                        mTarget.print(packageName);
                        mTarget.print(".");
                    }
                    mTarget.print(fqEndStateName);
                    mTarget.println(":Entry(fsm)\\n\")");
                    mTarget.print(indent2);
                    mTarget.println("end");
                }
            }

            mTarget.print(indent2);
            mTarget.print("fsm:pushState(");
            mTarget.print(pushStateName);
            mTarget.println(")");
        }
        else if (transType == TransType.TRANS_POP)
        {
            mTarget.print(indent2);
            mTarget.println("fsm:popState()");
        }

        // Perform the new state's enty actions.
        // v. 1.0, beta 3: Not any more. The entry actions are
        // executed only if 1) this is a standard, non-loopback
        // transition or a push transition.
        if ((transType == TransType.TRANS_SET &&
             loopbackFlag == false) ||
             transType == TransType.TRANS_PUSH)
        {
            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println("if fsm.debugFlag then");
                mTarget.print(indent2);
                mTarget.print("    fsm.debugStream:write(\"");
                mTarget.print("BEFORE ENTRY    : ");
                if (packageName != null &&
                    packageName.length() > 0)
                {
                    mTarget.print(packageName);
                    mTarget.print(".");
                }
                mTarget.print(fqEndStateName);
                mTarget.println(":Entry(fsm)\\n\")");
                mTarget.print(indent2);
                mTarget.println("end");
            }

            mTarget.print(indent2);
            mTarget.println("fsm:getState():Entry(fsm)");

            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println("if fsm.debugFlag then");
                mTarget.print(indent2);
                mTarget.print("    fsm.debugStream:write(\"");
                mTarget.print("AFTER ENTRY     : ");
                if (packageName != null &&
                    packageName.length() > 0)
                {
                    mTarget.print(packageName);
                    mTarget.print(".");
                }
                mTarget.print(fqEndStateName);
                mTarget.println(":Entry(fsm)\\n\")");
                mTarget.print(indent2);
                mTarget.println("end");
            }
        }

        // If there is a transition associated with the pop, then
        // issue that transition here.
        if (transType == TransType.TRANS_POP &&
            endStateName.equals(
                SmcElement.NIL_STATE) == false &&
            endStateName.length() > 0)
        {
            String popArgs = guard.getPopArgs();

            mTarget.print(indent2);
            mTarget.print("fsm:");
            mTarget.print(endStateName);
            mTarget.print("(");

            // Output any and all pop arguments.
            if (popArgs.length() > 0)
            {
                mTarget.print(popArgs);
                mTarget.println();
                mTarget.print(indent2);
                mTarget.println(")");
            }
            else
            {
                mTarget.println(")");
            }
        }

        return;
    } // end of visit(SmcGuard)

    /**
     * Emits Lua code for this FSM action.
     * @param action emits Lua code for this action.
     */
    @Override
    public void visit(final SmcAction action)
    {
        String name = action.getName();
        List<String> arguments = action.getArguments();

        if (action.isProperty())
        {
            mTarget.print(mIndent);
            mTarget.print("ctxt.");
            mTarget.print(name);
            mTarget.print(" = ");
            mTarget.println(arguments.get(0));
        }
        else
        {
            // Need to distinguish between FSMContext actions and
            // application class actions. If the action is
            // "emptyStateStack", then pass it to the context.
            // Otherwise, let the application class handle it.
            mTarget.print(mIndent);
            if (action.isEmptyStateStack())
            {
                mTarget.println("fsm:emptyStateStack()");
            }
            else
            {
                Iterator<String> it;
                String sep;

                mTarget.print("ctxt:");
	        mTarget.print(name);
	        mTarget.print("(");

	        for (it = arguments.iterator(), sep = "";
	             it.hasNext();
	             sep = ", ")
	        {
	            mTarget.print(sep);
	            mTarget.print(it.next());
	        }

	        mTarget.println(")");
            }
        }

        return;
    } // end of visit(SmcAction)

    //
    // end of SmcVisitor Abstract Method Impelementation.
    //-----------------------------------------------------------
} // end of class SmcLuaGenerator

//
// CHANGE LOG
// $Log: SmcLuaGenerator.java,v $
// Revision 1.20  2015/04/24 18:25:24  fperrad
// Lua: shadow _ENV
//
// Revision 1.19  2015/02/16 21:43:09  cwrapp
// SMC v. 6.5.0
//
// SMC - The State Machine Compiler v. 6.5.0
//
// Major changes:
//
// (Java)
//     Added a new "-java7" target language. This version represents
//     the FSM as a transition table. The transition table maps the
//     current state and the transition to a
//     java.lang.invoke.MethodHandle. The transition is executed by
//     calling MethodHandle.invokeExact, which is only slightly
//     slower than a compiled method call.
//
//     The -java7 generated code is compatible with -java generated
//     code. This allows developers to switch between the two
//     without changing application code.
//
//     NOTE: -java7 requires Java 1.7 or latter to run.
//
//
// Minor changes:
//
// (None.)
//
//
// Bug Fixes:
//
// (Objective-C)
//     Incorrect initWithOwner body generated. Same fundamental
//     problem as SF bug 200. See below.
//     (SF bug 198)
//
// (Website)
//     Corrected broken link in FAQ page.
//     (SF bug 199)
//
// (C++)
//     Corrected the invalid generated FSM class name.
//     (SF bug 200)
//
// (C)
//     EXIT_STATE() #define macro not generated.
//     (SF bug 201)
//
// (Manual)
//     Corrected examples which showed %fsmclass and %map set to the
//     same name. This is invalid for most target languages since
//     that would mean the nested map class would have the same name
//     as the containing FSM class.
//
//
//
// ++++++++++++++++++++++++++++++++++++++++
//
// If you have any questions or bugs, please surf
// over to http://smc.sourceforge.net and check out
// the discussion and bug forums. Note: you must be
// a SourceForge member to add articles or bugs. You
// do not have to be a member to read posted
// articles or bugs.
//
// Revision 1.18  2013/07/14 14:32:38  cwrapp
// check in for release 6.2.0
//
// Revision 1.17  2012/05/13 16:31:10  fperrad
// fix 3525846 : endless recursion with guarded transitions in Default state
//
// Revision 1.16  2011/11/20 14:58:33  cwrapp
// Check in for SMC v. 6.1.0
//
// Revision 1.15  2010/11/21 18:47:52  fperrad
// refactor Lua generation (compat 5.2)
//
// Revision 1.14  2010/08/22 21:12:09  fperrad
// Lua: refactor without package.seeall
//
// Revision 1.13  2010/03/15 13:15:54  fperrad
// fix indentation
//
// Revision 1.12  2010/03/06 13:30:34  fperrad
// fix reflect
//
// Revision 1.11  2010/03/05 21:29:53  fperrad
// Allows property with Groovy, Lua, Perl, Python, Ruby & Scala
//
// Revision 1.10  2009/12/17 19:51:43  cwrapp
// Testing complete.
//
// Revision 1.9  2009/11/27 17:19:20  fperrad
// Implemented feature req. #2718892 for Lua, Perl, PHP, Python, Ruby &Scala
//
// Revision 1.8  2009/11/25 22:30:19  cwrapp
// Fixed problem between %fsmclass and sm file names.
//
// Revision 1.7  2009/11/24 20:42:39  cwrapp
// v. 6.0.1 update
//
// Revision 1.6  2009/10/06 15:31:59  kgreg99
// 1. Started implementation of feature request #2718920.
//     1.1 Added method boolean isStatic() to SmcAction class. It returns false now, but is handled in following language generators: C#, C++, java, php, VB. Instance identificator is not added in case it is set to true.
// 2. Resolved confusion in "emtyStateStack" keyword handling. This keyword was not handled in the same way in all the generators. I added method boolean isEmptyStateStack() to SmcAction class. This method is used instead of different string comparisons here and there. Also the generated method name is fixed, not to depend on name supplied in the input sm file.
//
// Revision 1.5  2009/09/12 21:44:49  kgreg99
// Implemented feature req. #2718941 - user defined generated class name.
// A new statement was added to the syntax: %fsmclass class_name
// It is optional. If not used, generated class is called as before "XxxContext" where Xxx is context class name as entered via %class statement.
// If used, generated class is called asrequested.
// Following language generators are touched:
// c, c++, java, c#, objc, lua, groovy, scala, tcl, VB
// This feature is not tested yet !
// Maybe it will be necessary to modify also the output file name.
//
// Revision 1.4  2009/09/05 15:39:20  cwrapp
// Checking in fixes for 1944542, 1983929, 2731415, 2803547 and feature 2797126.
//
// Revision 1.3  2009/04/22 19:40:07  fperrad
// Added enterStartState method
//
// Revision 1.2  2009/03/27 09:41:47  cwrapp
// Added F. Perrad changes back in.
//
// Revision 1.1  2009/03/01 18:20:42  cwrapp
// Preliminary v. 6.0.0 commit.
//
//
