//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2005 - 2009, 2019. Charles W. Rapp.
// All Rights Reserved.
//
// Port to Python by Francois Perrad, francois.perrad@gadz.org
// Copyright 2004-2009, Francois Perrad.
// All Rights Reserved.
//
// Contributor(s):
//   Eitan Suez contributed examples/Ant.
//   (Name withheld) contributed the C# code generation and
//   examples/C#.
//   Francois Perrad contributed the Python code generation and
//   examples/Python.
//   Chris Liscio contributed the Objective-C code generation
//   and examples/ObjC.
//
// RCS ID
// $Id: SmcPerlGenerator.java,v 1.14 2013/07/14 14:32:38 cwrapp Exp $
//
// CHANGE LOG
// (See the bottom of this file.)
//

package net.sf.smc.generator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import net.sf.smc.model.SmcAction;
import net.sf.smc.model.SmcElement;
import net.sf.smc.model.SmcElement.TransType;
import net.sf.smc.model.SmcFSM;
import net.sf.smc.model.SmcGuard;
import net.sf.smc.model.SmcMap;
import net.sf.smc.model.SmcParameter;
import net.sf.smc.model.SmcState;
import net.sf.smc.model.SmcTransition;
import net.sf.smc.model.SmcVisitor;
import net.sf.smc.model.TargetLanguage;

/**
 * Visits the abstract syntax tree, emitting Perl code.
 * @see SmcElement
 * @see SmcCodeGenerator
 * @see SmcVisitor
 * @see SmcOptions
 *
 * @author Francois Perrad
 */

public final class SmcPerlGenerator
    extends SmcCodeGenerator
{
//---------------------------------------------------------------
// Member data
//

//---------------------------------------------------------------
// Member methods
//

    //-----------------------------------------------------------
    // Constructors.
    //

    /**
     * Creates a Perl code generator for the given options.
     * @param options The target code generator options.
     */
    public SmcPerlGenerator(final SmcOptions options)
    {
        super (options, TargetLanguage.PERL.suffix());
    } // end of SmcPerlGenerator(SmcOptions)

    //
    // end of Constructors.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // SmcVisitor Abstract Method Impelementation.
    //

    /**
     * Emits Perl code for the finite state machine.
     * @param fsm emit Perl code for this finite state machine.
     */
    @Override
    public void visit(final SmcFSM fsm)
    {
        String packageName = fsm.getPackage();
        String context = fsm.getContext();
        String rawSource = fsm.getSource();
        String startState = fsm.getStartState();
        List<SmcMap> maps = fsm.getMaps();
        List<SmcTransition> transitions;
        String transName;

        mTarget.println("# ex: set ro:");
        mTarget.println("# DO NOT EDIT.");
        mTarget.println(
            "# generated by smc (http://smc.sourceforge.net/)");
        mTarget.print("# from file : ");
        mTarget.print(mSrcfileBase);
        mTarget.println(".sm");
        mTarget.println();

        // Dump out the raw target code, if any.
        if (rawSource != null && rawSource.length () > 0)
        {
            mTarget.println(rawSource);
            mTarget.println();
        }

        // If a package has been specified,
        if (packageName != null && packageName.length() > 0)
        {
              context = packageName + "::" + context;
              startState = packageName + "::" + startState;
        }

        mTarget.println("use strict;");
        mTarget.println("use warnings;");
        mTarget.println();
        mTarget.println("use DFA::Statemap;");

        // Do user-specified imports now.
        for (String imp: fsm.getImports())
        {
            mTarget.print("use ");
            mTarget.print(imp);
            mTarget.println(";");
        }

        // Declare the inner state class.
        mTarget.println();
        mTarget.print("package ");
        mTarget.print(context);
        mTarget.println("State;");
        mTarget.println("    use base qw(DFA::Statemap::State);");
        mTarget.println();
        mTarget.println("    use Carp;");
        mTarget.println();

        mTarget.println("    sub Entry {}");
        mTarget.println();
        mTarget.println("    sub Exit {}");
        mTarget.println();

        // Don't generate the default transition methods.
        // Use automatic delegation.
        mTarget.println("    my %meth = (");
        transitions = fsm.getTransitions();
        for (SmcTransition trans: transitions)
        {
            transName = trans.getName();

            // Don't generate the Default transition here.
            if (transName.equals("Default") == false)
            {
                mTarget.print("        ");
                mTarget.print(transName);
                mTarget.println(" => undef,");
            }
        }
        mTarget.println("    );");
        mTarget.println();
        mTarget.println("    sub AUTOLOAD {");
        mTarget.println("        my $self = shift;");
        mTarget.println("        use vars qw( $AUTOLOAD );");
        mTarget.println("        (my $method = $AUTOLOAD) =~ s/^.*:://;");
        mTarget.println("        return unless exists $meth{$method};");

        // If this method is reached, that means that
        // this transition was passed to a state which
        // does not define the transition. Call the
        // state's default transition method.
        mTarget.println("        $self->Default(@_);");
        mTarget.println("    }");
        mTarget.println();

        // Generate the overall Default transition for all maps.
        mTarget.println("    sub Default {");
        mTarget.println("        my $self = shift;");
        mTarget.println("        my ($fsm) = @_;");

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.println(
                "        if ($fsm->getDebugFlag()) {");
            mTarget.println(
                "            my $fh = $fsm->getDebugStream();");
            mTarget.println(
                "            print $fh \"TRANSITION   : Default\\n\";");
            mTarget.println("        }");
            mTarget.println(
                "        confess \"TransitionUndefinedException\\n\",");
        }
        else
        {
            mTarget.println(
                "        croak \"TransitionUndefinedException\\n\",");
        }
        mTarget.println(
            "            \"State: \", $fsm->getState()->getName(),\"\\n\",");
        mTarget.println(
            "            \"Transition: \", $fsm->getTransition(),\"\\n\";");
        mTarget.println("    }");

        // Have each map print out its target code now.
        for (SmcMap map: maps)
        {
            map.accept(this);
        }

        // End of context class.
        mTarget.println();

        // The context class contains all the state classes as
        // inner classes, so generate the context first rather
        // than last.
        mTarget.print("package ");
        mTarget.print(context);
        mTarget.println("_sm;");
        mTarget.println(
            "    use base qw(DFA::Statemap::FSMContext);");
        mTarget.println();
        mTarget.println("    use Carp;");
        mTarget.println();

        // Generate the context class' constructor.
        mTarget.println("    sub new {");
        mTarget.println("        my $proto = shift;");
        mTarget.println("        my $class = ref($proto) || $proto;");
        mTarget.print("        my $self = $class->SUPER::new($");
        mTarget.print(startState);
        mTarget.println(");");
        mTarget.println("        my ($owner) = @_;");
        mTarget.println("        $self->{_owner} = $owner;");

        mTarget.println("        return $self;");
        mTarget.println("    }");
        mTarget.println();

        // Don't generate the transition methods.
        // Use automatic delegation.
        mTarget.println("    sub AUTOLOAD {");
        mTarget.println("        my $self = shift;");
        mTarget.println("        use vars qw( $AUTOLOAD );");
        mTarget.println("        (my $method = $AUTOLOAD) =~ s/^.*:://;");
        mTarget.println("        return unless exists $meth{$method};");
        mTarget.println("        $self->{_transition} = $method;");
        mTarget.println("        $self->getState()->$method($self, @_);");
        mTarget.println("        $self->{_transition} = undef;");
        mTarget.println("    }");
        mTarget.println();

        // enterStartState()
        // Execute the start state's entry actions.
        mTarget.println("    sub enterStartState {");
        mTarget.println("        my $self = shift;");
        mTarget.println("        $self->{_state}->Entry($self);");
        mTarget.println("    }");
        mTarget.println();

        // getOwner() method.
        mTarget.println("    sub getOwner {");
        mTarget.println("        my $self = shift;");
        mTarget.println("        return $self->{_owner};");
        mTarget.println("    }");
        mTarget.println();

        if (mReflectFlag)
        {
            // getStates() method.
            mTarget.println("    sub getStates {");
            mTarget.println("        my $self = shift;");
            mTarget.println("        return (");
            for (SmcMap map: maps)
            {
                String mapName = map.getName();

                for (SmcState state: map.getStates())
                {
                    mTarget.print("            $");
                    mTarget.print(mapName);
                    mTarget.print("::");
                    mTarget.print(state.getClassName());
                    mTarget.println(",");
                }
            }
            mTarget.println("        );");
            mTarget.println("    }");
            mTarget.println();

            // getTransitions() method.
            mTarget.println("    sub getTransitions {");
            mTarget.println("        my $self = shift;");
            mTarget.println("        return (");
            for (SmcTransition trans: transitions)
            {
                mTarget.print("            '");
                mTarget.print(trans.getName());
                mTarget.println("',");
            }
            mTarget.println("        );");
            mTarget.println("    }");
            mTarget.println();
        }

        mTarget.println("1;");
        mTarget.println();

        mTarget.println("# Local variables:");
        mTarget.println("#  buffer-read-only: t");
        mTarget.println("# End:");

        return;
    } // end of visit(SmcFSM)

    @Override
    public void visit(final SmcMap map)
    {
        List<SmcTransition> definedDefaultTransitions;
        SmcState defaultState = map.getDefaultState();
        String packageName = map.getFSM().getPackage();
        String context = map.getFSM().getContext();
        String mapName = map.getName();
        List<SmcState> states = map.getStates();

        // If a package has been specified,
        if (packageName != null && packageName.length() > 0)
        {
              mapName = packageName + "::" + mapName;
              context = packageName + "::" + context;
        }

        // Initialize the default transition list to all the
        // default state's transitions.
        if (defaultState != null)
        {
            definedDefaultTransitions =
                    defaultState.getTransitions();
        }
        else
        {
            definedDefaultTransitions = new ArrayList<>();
        }

        // Declare the map class.
        mTarget.println();
        mTarget.print("package ");
        mTarget.print(mapName);
        mTarget.println(";");
        mTarget.println();
        mTarget.println("use vars qw(");

        // Declare each of the state class member data.
        for (SmcState state: states)
        {
            mTarget.print("    $");
            mTarget.println(state.getInstanceName());
        }
        mTarget.println("    $Default");
        mTarget.println(");");

        // Declare the map default state class.
        mTarget.println();
        mTarget.print("package ");
        mTarget.print(mapName);
        mTarget.println("_Default;");
        mTarget.print("    use base qw(");
        mTarget.print(context);
        mTarget.println("State);");

        // Declare the user-defined default transitions first.
        for (SmcTransition transition: definedDefaultTransitions)
        {
            transition.accept(this);
        }

        // If -reflect was specified, then generate the
        // _transitions table.
        if (mReflectFlag)
        {
            List<SmcTransition> allTransitions =
                map.getFSM().getTransitions();
            String transName;
            int transDefinition;

            // Generate the getTransitions() method.
            mTarget.println();
            mTarget.println("    sub getTransitions {");
            mTarget.println("        return {");

            // Now place all transition names and states into the
            // map.
            for (SmcTransition transition: allTransitions)
            {
                transName = transition.getName();

                // If the transition is defined in this map's
                // default state, then the value is 2.
                if (definedDefaultTransitions.contains(transition))
                {
                    transDefinition = 2;
                }
                // Otherwise the value is 0 - undefined.
                else
                {
                    transDefinition = 0;
                }

                mTarget.print("            '");
                mTarget.print(transName);
                mTarget.print("' => ");
                mTarget.print(transDefinition);
                mTarget.println(",");
            }
            mTarget.println("        };");
            mTarget.println("    }");
        }

        // Have each state now generate its code. Each state
        // class is an inner class.
        for (SmcState state: states)
        {
            state.accept(this);
        }

        // Initialize the map class.
        mTarget.println();
        mTarget.print("package ");
        mTarget.print(mapName);
        mTarget.println(';');
        mTarget.println();
        mTarget.println("sub BEGIN {");

        for (SmcState state: states)
        {
            mTarget.print("    $");
            mTarget.print(state.getInstanceName());
            mTarget.print(" = ");
            mTarget.print(mapName);
            mTarget.print('_');
            mTarget.print(state.getClassName());
            mTarget.print("->new('");
            mTarget.print(mapName);
            mTarget.print('.');
            mTarget.print(state.getClassName());
            mTarget.print("', ");
            mTarget.print(SmcMap.getNextStateId());
            mTarget.println(");");
        }

        // Instantiate a default state as well.
        mTarget.print("    $Default = ");
        mTarget.print(mapName);
        mTarget.print("_Default->new('");
        mTarget.print(mapName);
        mTarget.println(".Default', -1);");
        mTarget.println("}");

        return;
    } // end of visit(SmcMap)

    /**
     * Emits Perl code for this FSM state.
     * @param state emits Perl code for this state.
     */
    @Override
    public void visit(final SmcState state)
    {
        SmcMap map = state.getMap();
        String packageName = map.getFSM().getPackage();
        String mapName = map.getName();
        String stateName = state.getClassName();
        List<SmcAction> actions;
        String indent2;

        // If a package has been specified,
        if (packageName != null && packageName.length() > 0)
        {
              mapName = packageName + "::" + mapName;
        }

        // Declare the inner state class.
        mTarget.println();
        mTarget.print("package ");
        mTarget.print(mapName);
        mTarget.print('_');
        mTarget.print(stateName);
        mTarget.println(";");
        mTarget.print("    use base qw(");
        mTarget.print(mapName);
        mTarget.println("_Default);");

        // Add the Entry() and Exit() member functions if this
        // state defines them.
        actions = state.getEntryActions();
        if (actions != null && actions.size() > 0)
        {
            mTarget.println();
            mTarget.println("    sub Entry {");
            mTarget.println("        my $self = shift;");
            mTarget.println("        my ($fsm) = @_;");

            // Declare the "ctxt" local variable.
            mTarget.println(
                "        my $ctxt = $fsm->getOwner();");

            // Generate the actions associated with this code.
            indent2 = mIndent;
            mIndent = "        ";
            for (SmcAction action: actions)
            {
                action.accept(this);
            }
            mIndent = indent2;

            // End the Entry() member function with a return.
            mTarget.println("    }");
        }

        actions = state.getExitActions();
        if (actions != null && actions.size() > 0)
        {
            mTarget.println();
            mTarget.println("    sub Exit {");
            mTarget.println("        my $self = shift;");
            mTarget.println("        my ($fsm) = @_;");

            // Declare the "ctxt" local variable.
            mTarget.println(
                "        my $ctxt = $fsm->getOwner();");

            // Generate the actions associated with this code.
            indent2 = mIndent;
            mIndent = "        ";
            for (SmcAction action: actions)
            {
                action.accept(this);
            }
            mIndent = indent2;

            // End the Exit() member function with a return.
            mTarget.println("    }");
        }

        // Have each transition generate its code.
        for (SmcTransition transition: state.getTransitions())
        {
            transition.accept(this);
        }

        // If -reflect was specified, then generate the
        // _transitions table.
        if (mReflectFlag)
        {
            List<SmcTransition> allTransitions =
                map.getFSM().getTransitions();
            List<SmcTransition> stateTransitions =
                state.getTransitions();
            SmcState defaultState = map.getDefaultState();
            List<SmcTransition> defaultTransitions;
            String transName;
            int transDefinition;

            // Initialize the default transition list to all the
            // default state's transitions.
            if (defaultState != null)
            {
                defaultTransitions =
                    defaultState.getTransitions();
            }
            else
            {
                defaultTransitions = new ArrayList<>();
            }

            // Generate the getTransitions() method.
            mTarget.println();
            mTarget.println("    sub getTransitions {");
            mTarget.println("        return {");

            // Now place all transition names and states into the
            // map.
            for (SmcTransition transition: allTransitions)
            {
                transName = transition.getName();

                // If the transition is in this state, then its
                // value is 1.
                if (stateTransitions.contains(transition))
                {
                    transDefinition = 1;
                }
                // If the transition is defined in this map's
                // default state, then the value is 2.
                else if (defaultTransitions.contains(transition))
                {
                    transDefinition = 2;
                }
                // Otherwise the value is 0 - undefined.
                else
                {
                    transDefinition = 0;
                }

                mTarget.print("            '");
                mTarget.print(transName);
                mTarget.print("' => ");
                mTarget.print(transDefinition);
                mTarget.println(",");
            }
            mTarget.println("        };");
            mTarget.println("    }");
        }

        // End of this state class declaration.

        return;
    } // end of visit(SmcState)

    /**
     * Emits Perl code for this FSM state transition.
     * @param transition emits Perl code for this state transition.
     */
    @Override
    public void visit(final SmcTransition transition)
    {
        SmcState state = transition.getState();
        SmcMap map = state.getMap();
        String packageName = map.getFSM().getPackage();
        String mapName = map.getName();
        String stateName = state.getClassName();
        String transName = transition.getName();
        List<SmcParameter> parameters =
            transition.getParameters();
        List<SmcGuard> guards = transition.getGuards();
        Iterator<SmcGuard> git = guards.iterator();
        SmcGuard guard;
        SmcGuard nullGuard = null;

        // If a package has been specified,
        if (packageName != null && packageName.length() > 0)
        {
              mapName = packageName + "::" + mapName;
        }

        mTarget.println();
        mTarget.print("    sub ");
        mTarget.print(transName);
        mTarget.println(" {");
        mTarget.println("        my $self = shift;");
        mTarget.print("        my ($fsm");

        // Add user-defined parameters.
        for (SmcParameter param: parameters)
        {
            mTarget.print(", ");
            mTarget.print(param.getName());
        }
        mTarget.println(") = @_;");

        // All transitions have a "ctxt" local variable.
        // 8/14/2003:
        // Do this only if there are any transition actions or
        // guard conditions which reference it.
        if (transition.hasCtxtReference())
        {
            mTarget.println(
                "        my $ctxt = $fsm->getOwner();");
        }

        // Output transition to debug stream.
        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            mTarget.println(
               "        if ($fsm->getDebugFlag()) {");
            mTarget.println(
               "            my $fh = $fsm->getDebugStream();");
            mTarget.print(
               "            print $fh \"LEAVING STATE   : ");
            mTarget.print(mapName);
            mTarget.print("::");
            mTarget.print(stateName);
            mTarget.println("\\n\";");
            mTarget.println("        }");
        }

        // Loop through the guards and print each one.
        mIndent = "    ";
        mGuardIndex = 0;
        mGuardCount = guards.size();
        while (git.hasNext())
        {
            guard = git.next();

            // Count up the guards with no condition.
            if (guard.getCondition().isEmpty())
            {
                nullGuard = guard;
            }
            else
            {
                guard.accept(this);
                ++mGuardIndex;
            }
        }

        // Is there an unguarded transition?
        if (nullGuard != null)
        {
            // Does this guard have any actions or is this guard
            // *not* an internal loopback transition?
            if (nullGuard.hasActions() ||
                !(nullGuard.getEndState()).equals(SmcElement.NIL_STATE) ||
                nullGuard.getTransType() == TransType.TRANS_PUSH ||
                nullGuard.getTransType() == TransType.TRANS_POP)
            {
                // Need to output either the action and/or the
                // next state, so output the guard.
                nullGuard.accept(this);
            }

            mTarget.println();
        }
        // If all guards have a condition, then create a final
        // "else" clause which passes control to the default
        // transition. Pass all arguments into the default
        // transition.
        else if (mGuardIndex > 0)
        {
            if (mGuardCount == 1)
            {
                mTarget.println("        }");
            }

            mTarget.println("        else {");

            // Call the super class' transition method using
            // the "super" keyword and not the class name.
            mTarget.print("            ");
            mTarget.print("$self->SUPER::");
            mTarget.print(transName);
            mTarget.print("($fsm");

            for (SmcParameter param: parameters)
            {
                mTarget.print(", ");
                mTarget.print(param.getName());
            }

            mTarget.println(");");
            mTarget.println("        }");
            mTarget.println();
        }

        mTarget.println("    }");

        return;
    } // end of visit(SmcTransition)

    /**
     * Emits Perl code for this FSM transition guard.
     * @param guard emits Perl code for this transition guard.
     */
    @Override
    public void visit(final SmcGuard guard)
    {
        SmcTransition transition = guard.getTransition();
        SmcState state = transition.getState();
        SmcMap map = state.getMap();
        String packageName = map.getFSM().getPackage();
        String mapName = map.getName();
        String stateName = state.getClassName();
        String transName = transition.getName();
        TransType transType = guard.getTransType();
        boolean loopbackFlag;
        String indent2;
        String indent3;
        String indent4;
        String endStateName = guard.getEndState();
        String fqEndStateName = "";
        String pushStateName = guard.getPushState();
        String condition = guard.getCondition();
        List<SmcAction> actions = guard.getActions();

        // If a package has been specified,
        if (packageName != null && packageName.length() > 0)
        {
              mapName = packageName + "::" + mapName;
        }

        // If this guard's end state is not of the form
        // "map::state", then prepend the map name to the
        // state name.
        // DON'T DO THIS IF THIS IS A POP TRANSITION!
        // The "state" is actually a transition name.
        if (transType != TransType.TRANS_POP &&
            endStateName.length () > 0 &&
            endStateName.equals(SmcElement.NIL_STATE) == false)
        {
            if (!endStateName.contains("::"))
            {
                endStateName = mapName + "::" + endStateName;
            }
            else if (packageName != null && packageName.length() > 0)
            {
                endStateName = packageName + "::" + endStateName;
            }
        }

        // Qualify the state and push state names as well.
        if (!stateName.contains("::"))
        {
            stateName = mapName + "::" + stateName;
        }

        // v. 2.0.2: If the push state is not fully-qualified,
        // then prepend the current map's name and make if
        // fully-qualified.
        if (pushStateName != null &&
            pushStateName.length() > 0)
        {
            if (!pushStateName.contains("::"))
            {
                pushStateName = mapName + "::" + pushStateName;
            }
            else if (packageName != null &&
                     packageName.length() > 0)
            {
                pushStateName =
                    packageName + "::" + pushStateName;
            }
        }

        loopbackFlag = isLoopback(transType, endStateName);

        // The guard code generation is a bit tricky. The first
        // question is how many guards are there? If there are
        // more than one, then we will need to generate the
        // proper "if-then-else" code.
        if (mGuardCount > 1)
        {
            indent2 = mIndent + "        ";

            // There are multiple guards.
            // Is this the first guard?
            if (mGuardIndex == 0 && condition.length() > 0)
            {
                // Yes, this is the first. This means an "if"
                // should be used.
                mTarget.print(mIndent);
                mTarget.print("    if (");
                mTarget.print(condition);
                mTarget.println(") {");
            }
            else if (condition.length() > 0)
            {
                // No, this is not the first transition but it
                // does have a condition. Use an "else if".
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.print("    elsif (");
                mTarget.print(condition);
                mTarget.println(") {");
            }
            else
            {
                // This is not the first transition and it has
                // no condition.
                mTarget.println();
                mTarget.print(mIndent);
                mTarget.println("    else {");
            }
        }
        // There is only one guard. Does this guard have
        // a condition?
        else if (condition.length() == 0)
        {
            // No. This is a plain, old. vanilla transition.
            indent2 = mIndent + "    ";
        }
        else
        {
            // Yes there is a condition.
            indent2 = mIndent + "        ";

            mTarget.print(mIndent);
            mTarget.print("    if (");
            mTarget.print(condition);
            mTarget.println(") {");
        }

        // Now that the necessary conditions are in place, it's
        // time to dump out the transition's actions. First, do
        // the proper handling of the state change. If this
        // transition has no actions, then set the end state
        // immediately. Otherwise, unset the current state so
        // that if an action tries to issue a transition, it will
        // fail.
        if (actions.isEmpty() && !endStateName.isEmpty())
        {
            fqEndStateName = endStateName;
        }
        else if (actions.size() > 0)
        {
            // Save away the current state if this is a loopback
            // transition. Storing current state allows the
            // current state to be cleared before any actions are
            // executed. Remember: actions are not allowed to
            // issue transitions and clearing the current state
            // prevents them from doing do.
            if (loopbackFlag)
            {
                fqEndStateName = "endState";

                mTarget.print(indent2);
                mTarget.print("my $");
                mTarget.print(fqEndStateName);
                mTarget.println(" = $fsm->getState();");
            }
            else
            {
                fqEndStateName = endStateName;
            }
        }

        // Dump out the exit actions - but only for the first
        // guard.
        // v. 1.0, beta 3: Not any more. The exit actions are
        // executed only if 1) this is a standard, non-loopback
        // transition or a pop transition.
        if (transType == TransType.TRANS_POP ||
            loopbackFlag == false)
        {
            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println(
                    "if ($fsm->getDebugFlag()) {");
                mTarget.print(indent2);
                mTarget.println(
                    "    my $fh = $fsm->getDebugStream();");
                mTarget.print(indent2);
                mTarget.print("    print $fh \"");
                mTarget.print("BEFORE EXIT     : ");
                mTarget.print(stateName);
                mTarget.println("->Exit($fsm)\\n\";");
                mTarget.print(indent2);
                mTarget.println("}");
            }

            mTarget.print(indent2);
            mTarget.println("$fsm->getState()->Exit($fsm);");

            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println(
                    "if ($fsm->getDebugFlag()) {");
                mTarget.print(indent2);
                mTarget.println(
                    "    my $fh = $fsm->getDebugStream();");
                mTarget.print(indent2);
                mTarget.print("    print $fh \"");
                mTarget.print("AFTER EXIT      : ");
                mTarget.print(stateName);
                mTarget.println("->Exit($fsm)\\n\";");
                mTarget.print(indent2);
                mTarget.println("}");
            }
        }

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            List<SmcParameter> parameters =
                transition.getParameters();
            Iterator<SmcParameter> pit;
            String sep;

            mTarget.print(indent2);
            mTarget.println("if ($fsm->getDebugFlag()) {");
            mTarget.print(indent2);
            mTarget.println(
                "    my $fh = $fsm->getDebugStream();");
            mTarget.print(indent2);
            mTarget.print("    print $fh \"");
            mTarget.print("ENTER TRANSITION: ");
            mTarget.print(stateName);
            mTarget.print("->");
            mTarget.print(transName);

            mTarget.print("(");
            for (pit = parameters.iterator(), sep = "";
                 pit.hasNext();
                 sep = ", ")
            {
                mTarget.print(sep);
                mTarget.print((pit.next()).getName());
            }
            mTarget.print(")");

            mTarget.println("\\n\";");
            mTarget.print(indent2);
            mTarget.println("}");
        }

        // Dump out this transition's actions.
        if (actions.isEmpty())
        {
            if (condition.length() > 0)
            {
                mTarget.print(indent2);
                mTarget.println("# No actions.");
            }

            indent3 = indent2;
        }
        else
        {
            // Now that we are in the transition, clear the
            // current state.
            mTarget.print(indent2);
            mTarget.println("$fsm->clearState();");

            // v. 2.0.0: Place the actions inside a try/finally
            // block. This way the state will be set before an
            // exception leaves the transition method.
            // v. 2.2.0: Check if the user has turned off this
            // feature first.
            if (mNoCatchFlag == false)
            {
                mTarget.print(indent2);
                mTarget.println("eval {");

                indent3 = indent2 + "    ";
            }
            else
            {
                indent3 = indent2;
            }

            indent4 = mIndent;
            mIndent = indent3;

            for (SmcAction action: actions)
            {
                action.accept(this);
            }

            mIndent = indent4;

            if (mDebugLevel >= DEBUG_LEVEL_0)
            {
                List<SmcParameter> parameters =
                    transition.getParameters();
                Iterator<SmcParameter> pit;
                String sep;

                mTarget.print(indent2);
                mTarget.println("if ($fsm->getDebugFlag()) {");
                mTarget.print(indent2);
                mTarget.println(
                    "    my $fh = $fsm->getDebugStream();");
                mTarget.print(indent2);
                mTarget.print("    print $fh \"");
                mTarget.print("EXIT TRANSITION : ");
                mTarget.print(stateName);
                mTarget.print("->");
                mTarget.print(transName);

                mTarget.print("(");
                for (pit = parameters.iterator(), sep = "";
                     pit.hasNext();
                     sep = ", ")
                {
                    mTarget.print(sep);
                    mTarget.print((pit.next()).getName());
                }
                mTarget.print(")");

                mTarget.println("\\n\";");
                mTarget.print(indent2);
                mTarget.println("}");
            }

            // v. 2.2.0: Check if the user has turned off this
            // feature first.
            if (mNoCatchFlag == false)
            {
                mTarget.print(indent2);
                mTarget.println("};");
                mTarget.print(indent2);
                mTarget.println("warn $@ if ($@);");
            }
        }

        if (mDebugLevel >= DEBUG_LEVEL_0)
        {
            List<SmcParameter> parameters =
                transition.getParameters();
            Iterator<SmcParameter> pit;
            String sep;

            mTarget.print(indent3);
            mTarget.println("if ($fsm->getDebugFlag()) {");
            mTarget.print(indent3);
            mTarget.println(
                "    my $fh = $fsm->getDebugStream();");
            mTarget.print(indent2);
            mTarget.print("    print $fh \"");
            mTarget.print("EXIT TRANSITION : ");
            mTarget.print(stateName);
            mTarget.print("->");
            mTarget.print(transName);

            mTarget.print("(");
            for (pit = parameters.iterator(), sep = "";
                 pit.hasNext();
                 sep = ", ")
            {
                mTarget.print(sep);
                mTarget.print((pit.next()).getName());
            }
            mTarget.print(")");

            mTarget.println("\\n\";");
            mTarget.print(indent3);
            mTarget.println("}");
        }

        // Print the setState() call, if necessary. Do NOT
        // generate the set state it:
        // 1. The transition has no actions AND is a loopback OR
        // 2. This is a push or pop transition.
        if (transType == TransType.TRANS_SET &&
            (actions.size() > 0 || loopbackFlag == false))
        {
            mTarget.print(indent2);
            mTarget.print("$fsm->setState($");
            mTarget.print(fqEndStateName);
            mTarget.println(");");
        }
        else if (transType == TransType.TRANS_PUSH)
        {
            // Set the next state so this it can be pushed
            // onto the state stack. But only do so if a clear
            // state was done.
            if (loopbackFlag == false || actions.size() > 0)
            {
                mTarget.print(indent2);
                mTarget.print("$fsm->setState($");
                mTarget.print(fqEndStateName);
                mTarget.println(");");
            }

            // Before doing the push, execute the end state's
            // entry actions (if any) if this is not a loopback.
            if (loopbackFlag == false)
            {
                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.print(indent2);
                    mTarget.println(
                        "if ($fsm->getDebugFlag()) {");
                    mTarget.print(indent2);
                    mTarget.println(
                        "    my $fh = $fsm->getDebugStream();");
                    mTarget.print(indent2);
                    mTarget.print("    print $fh \"");
                    mTarget.print("BEFORE ENTRY    : ");
                    mTarget.print(fqEndStateName);
                    mTarget.println("->Entry($fsm)\\n\";");
                    mTarget.print(indent2);
                    mTarget.println("}");
                }

                mTarget.print(indent2);
                mTarget.println(
                    "$fsm->getState()->Entry($fsm);");

                if (mDebugLevel >= DEBUG_LEVEL_1)
                {
                    mTarget.print(indent2);
                    mTarget.println(
                        "if ($fsm->getDebugFlag()) {");
                    mTarget.print(indent2);
                    mTarget.println(
                        "    my $fh = $fsm->getDebugStream();");
                    mTarget.print(indent2);
                    mTarget.print("    print $fh \"");
                    mTarget.print("AFTER ENTRY     : ");
                    mTarget.print(fqEndStateName);
                    mTarget.println("->Entry($fsm)\\n\";");
                    mTarget.print(indent2);
                    mTarget.println("}");
                }
            }

            mTarget.print(indent2);
            mTarget.print("$fsm->pushState($");
            mTarget.print(pushStateName);
            mTarget.println(");");
        }
        else if (transType == TransType.TRANS_POP)
        {
            mTarget.print(indent2);
            mTarget.println("$fsm->popState();");
        }

        // Perform the new state's enty actions.
        // v. 1.0, beta 3: Not any more. The entry actions are
        // executed only if 1) this is a standard, non-loopback
        // transition or a push transition.
        if ((transType == TransType.TRANS_SET &&
             loopbackFlag == false) ||
             transType == TransType.TRANS_PUSH)
        {
            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println("if ($fsm->getDebugFlag()) {");
                mTarget.print(indent2);
                mTarget.println(
                    "    my $fh = $fsm->getDebugStream();");
                mTarget.print(indent2);
                mTarget.print("    print $fh \"");
                mTarget.print("BEFORE ENTRY    : ");
                mTarget.print(fqEndStateName);
                mTarget.println("->Entry($fsm)\\n\";");
                mTarget.print(indent2);
                mTarget.println("}");
            }

            mTarget.print(indent2);
            mTarget.println("$fsm->getState()->Entry($fsm);");

            if (mDebugLevel >= DEBUG_LEVEL_1)
            {
                mTarget.print(indent2);
                mTarget.println("if ($fsm->getDebugFlag()) {");
                mTarget.print(indent2);
                mTarget.println(
                    "    my $fh = $fsm->getDebugStream();");
                mTarget.print(indent2);
                mTarget.print("    print $fh \"");
                mTarget.print("AFTER ENTRY     : ");
                mTarget.print(fqEndStateName);
                mTarget.println("->Entry($fsm)\\n\";");
                mTarget.print(indent2);
                mTarget.println("}");
            }
        }

        // If there is a transition associated with the pop, then
        // issue that transition here.
        if (transType == TransType.TRANS_POP &&
            endStateName.equals(SmcElement.NIL_STATE) == false &&
            endStateName.length() > 0)
        {
            String popArgs = guard.getPopArgs();

            mTarget.print(indent2);
            mTarget.print("$fsm->");
            mTarget.print(endStateName);
            mTarget.print("(");

            // Output any and all pop arguments.
            if (popArgs.length() > 0)
            {
                mTarget.print(popArgs);
                mTarget.println();
                mTarget.print(indent2);
                mTarget.println(");");
            }
            else
            {
                mTarget.println(");");
            }
        }

        // If this is a guarded transition, it will be necessary
        // to close off the "if" body. DON'T PRINT A NEW LINE!
        // Why? Because an "else" or "else if" may follow and we
        // won't know until we go back to the transition target
        // generator whether all clauses have been done.
        if (mGuardCount > 1)
        {
            mTarget.print(mIndent);
            mTarget.print("    }");
        }

        return;
    } // end of visit(SmcGuard)

    /**
     * Emits Perl code for this FSM action.
     * @param action emits Perl code for this action.
     */
    @Override
    public void visit(final SmcAction action)
    {
        String name = action.getName();
        List<String> arguments = action.getArguments();

        if (action.isProperty())
        {
            mTarget.print(mIndent);
            mTarget.print("$ctxt->{");
            mTarget.print(name);
            mTarget.print("} = ");
            mTarget.print(arguments.get(0));
            mTarget.println(";");
        }
        else
        {
            // Need to distinguish between FSMContext actions and
            // application class actions. If the action is
            // "emptyStateStack", then pass it to the context.
            // Otherwise, let the application class handle it.
            mTarget.print(mIndent);
            if (action.isEmptyStateStack())
            {
                mTarget.println("$fsm->emptyStateStack();");
            }
            else
            {
                Iterator<String> it;
                String sep;

                mTarget.print("$ctxt->");
	        mTarget.print(name);
	        mTarget.print("(");

	        for (it = arguments.iterator(), sep = "";
	             it.hasNext();
	             sep = ", ")
	        {
	            mTarget.print(sep);
	            mTarget.print(it.next());
	        }

	        mTarget.println(");");
            }
        }

        return;
    } // end of visit(SmcAction)

    //
    // end of SmcVisitor Abstract Method Impelementation.
    //-----------------------------------------------------------
} // end of class SmcPerlGenerator

//
// CHANGE LOG
// $Log: SmcPerlGenerator.java,v $
// Revision 1.14  2013/07/14 14:32:38  cwrapp
// check in for release 6.2.0
//
// Revision 1.13  2011/11/20 14:58:33  cwrapp
// Check in for SMC v. 6.1.0
//
// Revision 1.12  2010/12/01 14:40:21  fperrad
// Perl: fix when package
//
// Revision 1.11  2010/08/30 13:39:37  fperrad
// Perl: better form of new
//
// Revision 1.10  2010/03/05 21:29:53  fperrad
// Allows property with Groovy, Lua, Perl, Python, Ruby & Scala
//
// Revision 1.9  2009/12/17 19:51:43  cwrapp
// Testing complete.
//
// Revision 1.8  2009/11/27 17:19:21  fperrad
// Implemented feature req. #2718892 for Lua, Perl, PHP, Python, Ruby &Scala
//
// Revision 1.7  2009/11/25 22:30:19  cwrapp
// Fixed problem between %fsmclass and sm file names.
//
// Revision 1.6  2009/11/24 20:42:39  cwrapp
// v. 6.0.1 update
//
// Revision 1.5  2009/10/06 15:31:59  kgreg99
// 1. Started implementation of feature request #2718920.
//     1.1 Added method boolean isStatic() to SmcAction class. It returns false now, but is handled in following language generators: C#, C++, java, php, VB. Instance identificator is not added in case it is set to true.
// 2. Resolved confusion in "emtyStateStack" keyword handling. This keyword was not handled in the same way in all the generators. I added method boolean isEmptyStateStack() to SmcAction class. This method is used instead of different string comparisons here and there. Also the generated method name is fixed, not to depend on name supplied in the input sm file.
//
// Revision 1.4  2009/09/05 15:39:20  cwrapp
// Checking in fixes for 1944542, 1983929, 2731415, 2803547 and feature 2797126.
//
// Revision 1.3  2009/04/22 19:07:04  fperrad
// Added enterStartState method
//
// Revision 1.2  2009/03/27 09:41:47  cwrapp
// Added F. Perrad changes back in.
//
// Revision 1.1  2009/03/01 18:20:42  cwrapp
// Preliminary v. 6.0.0 commit.
//
//
