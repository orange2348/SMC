/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SmcLexer.sm
 */


/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is State Machine Compiler (SMC).
 * 
 * The Initial Developer of the Original Code is Charles W. Rapp.
 * Portions created by Charles W. Rapp are
 * Copyright (C) 2000 - 2006, 2008. Charles W. Rapp.
 * All Rights Reserved.
 * 
 * Contributor(s):
 *   Eitan Suez contributed examples/Ant.
 *   (Name withheld) contributed the C# code generation and
 *   examples/C#.
 *   Francois Perrad contributed the Python code generation and
 *   examples/Python.
 *   Chris Liscio contributed the Objective-C code generation
 *   and examples/ObjC.
 *
 * smcLexer --
 *
 *  This statemap finds tokens in a statemap source file.
 *
 * RCS ID
 * Id: SmcLexer.sm,v 1.4 2011/11/20 14:58:33 cwrapp Exp
 *
 * CHANGE LOG
 * Log: SmcLexer.sm,v
 * Revision 1.4  2011/11/20 14:58:33  cwrapp
 * Check in for SMC v. 6.1.0
 *
 * Revision 1.3  2009/04/11 13:11:12  cwrapp
 * Corrected raw mode 3 to handle multiple argument template/generic declarations.
 *
 * Revision 1.2  2009/03/27 09:41:47  cwrapp
 * Added F. Perrad changes back in.
 *
 * Revision 1.1  2009/03/01 18:20:42  cwrapp
 * Preliminary v. 6.0.0 commit.
 *
 * Revision 1.10  2008/08/16 14:31:37  fperrad
 * + detabify
 *
 * Revision 1.9  2007/12/28 12:34:41  cwrapp
 * Version 5.0.1 check-in.
 *
 * Revision 1.8  2007/01/15 00:23:51  cwrapp
 * Release 4.4.0 initial commit.
 *
 * Revision 1.7  2006/09/16 15:04:29  cwrapp
 * Initial v. 4.3.3 check-in.
 *
 * Revision 1.6  2005/07/07 12:10:41  fperrad
 * Add a new token '$' for Perl language.
 *
 * Revision 1.5  2005/05/28 19:28:42  cwrapp
 * Moved to visitor pattern.
 *
 * Revision 1.5  2005/02/21 18:14:01  charlesr
 * Removed unknown FSM transition, using unicode transition
 * instead.
 *
 * Revision 1.4  2005/02/21 15:36:08  charlesr
 * Added Francois Perrad to Contributors section for Python work.
 *
 * Revision 1.3  2004/10/30 16:05:34  charlesr
 * Added unicode support.
 *
 * Revision 1.2  2004/09/06 16:40:22  charlesr
 * Added C# support.
 *
 * Revision 1.1  2004/01/29 02:14:49  charlesr
 * Add Default state containing single transition which
 * handles an unexpected asterisk.
 *
 * Revision 1.0  2003/12/14 21:04:00  charlesr
 * Initial revision
 *
 */


package net.sf.smc.parser;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodHandles.Lookup;
import java.lang.invoke.MethodType;
import statemap.FSMContext7;
import statemap.State7;
import statemap.TransitionHandle;

public final class SmcLexerContext
    extends FSMContext7
{
//---------------------------------------------------------------
// Member methods.
//

    //-----------------------------------------------------------
    // Constructors.
    //

    public SmcLexerContext(final SmcLexer owner)
    {
        this (owner, _States[TokenMap_Start_STATE_ID]);
    }

    public SmcLexerContext(final SmcLexer owner, final int initStateId)
    {
        this (owner, _States[initStateId]);    }

    public SmcLexerContext(final SmcLexer owner, final State7 initState)
    {
        super (initState);

        ctxt = owner;
    }

    //
    // end of Constructors.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // FSMContext7 Abstract Method Override.
    //

    @Override
    protected void executeAction(final MethodHandle mh)
    {
        try
        {
            mh.invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }

        return;
    }

    //
    // end of FSMContext7 Abstract Method Override.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // Transitions.
    //

    public void EOL()
    {
        _transition = "EOL";
        try
        {
            final TransitionHandle th =
                getState().transition(EOL134_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void alpha()
    {
        _transition = "alpha";
        try
        {
            final TransitionHandle th =
                getState().transition(alpha114_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void asterisk()
    {
        _transition = "asterisk";
        try
        {
            final TransitionHandle th =
                getState().transition(asterisk117_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void colon()
    {
        _transition = "colon";
        try
        {
            final TransitionHandle th =
                getState().transition(colon126_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void comma()
    {
        _transition = "comma";
        try
        {
            final TransitionHandle th =
                getState().transition(comma127_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void commentDone()
    {
        _transition = "commentDone";
        try
        {
            final TransitionHandle th =
                getState().transition(commentDone62_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void digit()
    {
        _transition = "digit";
        try
        {
            final TransitionHandle th =
                getState().transition(digit115_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void dollar()
    {
        _transition = "dollar";
        try
        {
            final TransitionHandle th =
                getState().transition(dollar131_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void equal()
    {
        _transition = "equal";
        try
        {
            final TransitionHandle th =
                getState().transition(equal130_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void gt()
    {
        _transition = "gt";
        try
        {
            final TransitionHandle th =
                getState().transition(gt125_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void left_brace()
    {
        _transition = "left_brace";
        try
        {
            final TransitionHandle th =
                getState().transition(left_brace118_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void left_bracket()
    {
        _transition = "left_bracket";
        try
        {
            final TransitionHandle th =
                getState().transition(left_bracket120_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void left_paren()
    {
        _transition = "left_paren";
        try
        {
            final TransitionHandle th =
                getState().transition(left_paren121_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void lt()
    {
        _transition = "lt";
        try
        {
            final TransitionHandle th =
                getState().transition(lt124_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void percent()
    {
        _transition = "percent";
        try
        {
            final TransitionHandle th =
                getState().transition(percent112_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void period()
    {
        _transition = "period";
        try
        {
            final TransitionHandle th =
                getState().transition(period123_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void right_brace()
    {
        _transition = "right_brace";
        try
        {
            final TransitionHandle th =
                getState().transition(right_brace119_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void right_paren()
    {
        _transition = "right_paren";
        try
        {
            final TransitionHandle th =
                getState().transition(right_paren122_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void semicolon()
    {
        _transition = "semicolon";
        try
        {
            final TransitionHandle th =
                getState().transition(semicolon128_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void slash()
    {
        _transition = "slash";
        try
        {
            final TransitionHandle th =
                getState().transition(slash116_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void sourceDone()
    {
        _transition = "sourceDone";
        try
        {
            final TransitionHandle th =
                getState().transition(sourceDone23_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void underscore()
    {
        _transition = "underscore";
        try
        {
            final TransitionHandle th =
                getState().transition(underscore129_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void unicode()
    {
        _transition = "unicode";
        try
        {
            final TransitionHandle th =
                getState().transition(unicode133_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    public void whitespace()
    {
        _transition = "whitespace";
        try
        {
            final TransitionHandle th =
                getState().transition(whitespace132_TRANSITION_ID);

            (th.handle()).invokeExact(this);
        }
        catch (Throwable tex)
        {
            if (_debugFlag == true)
            {
                tex.printStackTrace(_debugStream);
            }
        }
        _transition = "";
        return;
    }

    //
    // end of Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.Default State Transitions.
    //

    private void TokenMap_Default_asterisk()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Default.asterisk()");
            }

            clearState();
            ctxt.badToken("Unknown token");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Default.asterisk()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.Default State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.Start State Transitions.
    //

    private void TokenMap_Start_EOL()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.EOL()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.EOL()");
            }
        }
        finally
        {
        }


        return;
    }


    private void TokenMap_Start_alpha()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.alpha()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.alpha()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Word_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Start_colon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.colon()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.colon()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Colon_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Start_comma()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.comma()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.COMMA);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.comma()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_dollar()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.dollar()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.DOLLAR);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.dollar()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_equal()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.equal()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.EQUAL);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.equal()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_left_brace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.left_brace()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.LEFT_BRACE);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.left_brace()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_left_bracket()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.left_bracket()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.LEFT_BRACKET);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.left_bracket()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_left_paren()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.left_paren()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.LEFT_PAREN);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.left_paren()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_percent()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.percent()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.percent()");
            }
        }
        finally
        {
            setState(_States[TokenMap_PercentStart_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Start_right_brace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.right_brace()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.RIGHT_BRACE);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.right_brace()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_right_paren()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.right_paren()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.RIGHT_PAREN);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.right_paren()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_semicolon()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.semicolon()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.SEMICOLON);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.semicolon()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_slash()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.slash()");
            }
        }
        finally
        {
            setState(_States[TokenMap_CommentStart_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Start_underscore()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.underscore()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.underscore()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Word_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Start_unicode()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.unicode()");
            }

            clearState();
            ctxt.startToken();
            ctxt.addToToken();
            ctxt.outputChar();
            ctxt.badToken("Unknown character");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.unicode()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Start_whitespace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Start.whitespace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Start.whitespace()");
            }
        }
        finally
        {
        }


        return;
    }


    //
    // end of TokenMap.Start State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.CommentStart State Transitions.
    //

    private void TokenMap_CommentStart_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.CommentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.CommentStart.Default()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.endToken(SmcLexer.SLASH);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.CommentStart.Default()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_CommentStart_asterisk()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.CommentStart.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.CommentStart.asterisk()");
            }
        }
        finally
        {
            pushState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_CommentStart_commentDone()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.CommentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.CommentStart.commentDone()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.CommentStart.commentDone()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_CommentStart_slash()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.CommentStart.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.CommentStart.slash()");
            }
        }
        finally
        {
            pushState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.CommentStart State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.PercentStart State Transitions.
    //

    private void TokenMap_PercentStart_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentStart.Default()");
            }

            clearState();
            ctxt.addToToken();
            ctxt.badToken("Unknown % directive");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentStart.Default()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentStart_alpha()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentStart.alpha()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentStart.alpha()");
            }
        }
        finally
        {
            setState(_States[TokenMap_PercentKeyword_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentStart_left_brace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentStart.left_brace()");
            }

            clearState();
            ctxt.startToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentStart.left_brace()");
            }
        }
        finally
        {
            setState(_States[stateId]);
            pushState(_States[SourceMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentStart_percent()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentStart.percent()");
            }

            clearState();
            ctxt.addToToken();
            ctxt.endToken(SmcLexer.EOD);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentStart.percent()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentStart_right_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentStart.right_brace()");
            }

            clearState();
            ctxt.addToToken();
            ctxt.badToken("End-of-source appears without matching start-of-source");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentStart.right_brace()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentStart_sourceDone()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentStart.sourceDone()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentStart.sourceDone()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.PercentStart State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.PercentKeyword State Transitions.
    //

    private void TokenMap_PercentKeyword_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentKeyword");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentKeyword.Default()");
            }

            clearState();
            ctxt.addToToken();
            ctxt.badToken("Unknown % directive");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentKeyword.Default()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentKeyword_EOL()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentKeyword");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentKeyword.EOL()");
            }

            clearState();
            ctxt.checkPercentKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentKeyword.EOL()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_PercentKeyword_alpha()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentKeyword.alpha()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentKeyword.alpha()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_PercentKeyword_whitespace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.PercentKeyword");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.PercentKeyword.whitespace()");
            }

            clearState();
            ctxt.checkPercentKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.PercentKeyword.whitespace()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.PercentKeyword State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.Word State Transitions.
    //

    private void TokenMap_Word_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.Default()");
            }

            clearState();
            ctxt.badToken("Unknown token");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.Default()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_EOL()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.EOL()");
            }

            clearState();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.EOL()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_alpha()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.alpha()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.alpha()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Word_asterisk()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.asterisk()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.asterisk()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_colon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.colon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.colon()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Scope_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_comma()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.comma()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.comma()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_digit()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.digit()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.digit()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Word_dollar()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.dollar()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.dollar()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_equal()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.equal()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.equal()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_gt()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.gt()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.gt()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Word_left_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.left_brace()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.left_brace()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_left_bracket()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.left_bracket()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.left_bracket()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_left_paren()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.left_paren()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.left_paren()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_lt()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.lt()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.lt()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Word_period()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.period()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.period()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Word_right_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.right_brace()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.right_brace()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_right_paren()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.right_paren()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.right_paren()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_semicolon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.semicolon()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.semicolon()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_slash()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.slash()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.slash()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Word_underscore()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.underscore()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.underscore()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void TokenMap_Word_whitespace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Word");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Word.whitespace()");
            }

            clearState();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Word.whitespace()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.Word State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.Scope State Transitions.
    //

    private void TokenMap_Scope_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Scope");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Scope.Default()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.ungetChar();
            ctxt.checkKeyword();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Scope.Default()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Scope_colon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Scope");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Scope.colon()");
            }

            clearState();
            ctxt.addToToken("::");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Scope.colon()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Word_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.Scope State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // TokenMap.Colon State Transitions.
    //

    private void TokenMap_Colon_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Colon");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Colon.Default()");
            }

            clearState();
            ctxt.ungetChar();
            ctxt.addToToken(":");
            ctxt.endToken(SmcLexer.COLON);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Colon.Default()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void TokenMap_Colon_colon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : TokenMap.Colon");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: TokenMap.Colon.colon()");
            }

            clearState();
            ctxt.addToToken("::");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : TokenMap.Colon.colon()");
            }
        }
        finally
        {
            setState(_States[TokenMap_Word_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of TokenMap.Colon State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // OldCommentMap.Default State Transitions.
    //

    private void OldCommentMap_Default_alpha()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.alpha()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.alpha()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_digit()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.digit()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.digit()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_percent()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.percent()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.percent()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_slash()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.slash()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_asterisk()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.asterisk()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_left_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.left_brace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.left_brace()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_right_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.right_brace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.right_brace()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_left_bracket()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.left_bracket()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.left_bracket()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_left_paren()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.left_paren()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.left_paren()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_right_paren()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.right_paren()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.right_paren()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_period()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.period()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.period()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_lt()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.lt()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.lt()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_gt()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.gt()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.gt()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_colon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.colon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.colon()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_comma()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.comma()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.comma()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_semicolon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.semicolon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.semicolon()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_underscore()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.underscore()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.underscore()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_equal()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.equal()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.equal()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_dollar()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.dollar()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.dollar()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_whitespace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.whitespace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.whitespace()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_EOL()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.EOL()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.EOL()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Default_unicode()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Default.unicode()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Default.unicode()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of OldCommentMap.Default State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // OldCommentMap.Start State Transitions.
    //

    private void OldCommentMap_Start_asterisk()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Start.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Start.asterisk()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_CommentEnd_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_Start_slash()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.Start.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.Start.slash()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_CommentStart_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of OldCommentMap.Start State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // OldCommentMap.CommentStart State Transitions.
    //

    private void OldCommentMap_CommentStart_asterisk()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.CommentStart.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.CommentStart.asterisk()");
            }
        }
        finally
        {
            pushState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_CommentStart_commentDone()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.CommentStart");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.CommentStart.commentDone()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.CommentStart.commentDone()");
            }
        }
        finally
        {
            setState(_States[OldCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void OldCommentMap_CommentStart_slash()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.CommentStart.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.CommentStart.slash()");
            }
        }
        finally
        {
            pushState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of OldCommentMap.CommentStart State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // OldCommentMap.CommentEnd State Transitions.
    //

    private void OldCommentMap_CommentEnd_asterisk()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.CommentEnd.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.CommentEnd.asterisk()");
            }
        }
        finally
        {
        }


        return;
    }


    private void OldCommentMap_CommentEnd_slash()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : OldCommentMap.CommentEnd");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: OldCommentMap.CommentEnd.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : OldCommentMap.CommentEnd.slash()");
            }
        }
        finally
        {
            popState();
        }


        commentDone();

        return;
    }


    //
    // end of OldCommentMap.CommentEnd State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // NewCommentMap.Default State Transitions.
    //

    private void NewCommentMap_Default_alpha()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.alpha()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.alpha()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_digit()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.digit()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.digit()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_percent()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.percent()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.percent()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_slash()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.slash()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_asterisk()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.asterisk()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_left_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.left_brace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.left_brace()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_right_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.right_brace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.right_brace()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_left_bracket()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.left_bracket()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.left_bracket()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_left_paren()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.left_paren()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.left_paren()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_right_paren()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.right_paren()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.right_paren()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_period()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.period()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.period()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_lt()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.lt()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.lt()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_gt()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.gt()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.gt()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_colon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.colon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.colon()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_comma()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.comma()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.comma()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_semicolon()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.semicolon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.semicolon()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_underscore()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.underscore()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.underscore()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_equal()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.equal()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.equal()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_dollar()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.dollar()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.dollar()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_whitespace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.whitespace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.whitespace()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void NewCommentMap_Default_unicode()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Default");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Default.unicode()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Default.unicode()");
            }
        }
        finally
        {
            setState(_States[NewCommentMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of NewCommentMap.Default State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // NewCommentMap.Start State Transitions.
    //

    private void NewCommentMap_Start_EOL()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : NewCommentMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: NewCommentMap.Start.EOL()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : NewCommentMap.Start.EOL()");
            }
        }
        finally
        {
            popState();
        }


        commentDone();

        return;
    }


    //
    // end of NewCommentMap.Start State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // SourceMap.Start State Transitions.
    //

    private void SourceMap_Start_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : SourceMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.Start.Default()");
            }

            clearState();
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.Start.Default()");
            }
        }
        finally
        {
            setState(_States[SourceMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void SourceMap_Start_percent()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : SourceMap.Start");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.Start.percent()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.Start.percent()");
            }
        }
        finally
        {
            setState(_States[SourceMap_SourceEnd_STATE_ID]);
        }

        enterState();

        return;
    }


    //
    // end of SourceMap.Start State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // SourceMap.SourceEnd State Transitions.
    //

    private void SourceMap_SourceEnd_Default()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : SourceMap.SourceEnd");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.SourceEnd.Default()");
            }

            clearState();
            ctxt.addToToken("%");
            ctxt.addToToken();

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.SourceEnd.Default()");
            }
        }
        finally
        {
            setState(_States[SourceMap_Start_STATE_ID]);
        }

        enterState();

        return;
    }


    private void SourceMap_SourceEnd_percent()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.SourceEnd.percent()");
            }

            clearState();
            ctxt.addToToken("%");

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.SourceEnd.percent()");
            }
        }
        finally
        {
            setState(_States[stateId]);
        }


        return;
    }


    private void SourceMap_SourceEnd_right_brace()
    {
        final int stateId = _state.getId();

        if (_debugFlag == true)
        {
            _debugStream.println("LEAVING STATE   : SourceMap.SourceEnd");
        }

        exitState();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.SourceEnd.right_brace()");
            }

            clearState();
            ctxt.endToken(SmcLexer.SOURCE);

            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.SourceEnd.right_brace()");
            }
        }
        finally
        {
            popState();
        }


        sourceDone();

        return;
    }


    //
    // end of SourceMap.SourceEnd State Transitions.
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // SourceMap.NeverUsed State Transitions.
    //

    private void SourceMap_NeverUsed_EOL()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.EOL()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.EOL()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_alpha()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.alpha()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.alpha()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_asterisk()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.asterisk()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.asterisk()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_colon()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.colon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.colon()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_comma()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.comma()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.comma()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_digit()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.digit()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.digit()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_dollar()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.dollar()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.dollar()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_equal()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.equal()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.equal()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_gt()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.gt()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.gt()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_left_brace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.left_brace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.left_brace()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_left_bracket()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.left_bracket()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.left_bracket()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_left_paren()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.left_paren()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.left_paren()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_lt()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.lt()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.lt()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_period()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.period()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.period()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_right_brace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.right_brace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.right_brace()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_right_paren()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.right_paren()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.right_paren()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_semicolon()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.semicolon()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.semicolon()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_slash()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.slash()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.slash()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_underscore()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.underscore()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.underscore()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_unicode()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.unicode()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.unicode()");
            }
        }
        finally
        {
        }


        return;
    }


    private void SourceMap_NeverUsed_whitespace()
    {
        final int stateId = _state.getId();

        try
        {
            if (_debugFlag == true)
            {
                _debugStream.println("ENTER TRANSITION: SourceMap.NeverUsed.whitespace()");
            }


            if (_debugFlag == true)
            {
                _debugStream.println("EXIT TRANSITION : SourceMap.NeverUsed.whitespace()");
            }
        }
        finally
        {
        }


        return;
    }


    //
    // end of SourceMap.NeverUsed State Transitions.
    //-----------------------------------------------------------

//---------------------------------------------------------------
// Member data.
//

    transient private SmcLexer ctxt;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

    public static final int TokenMap_Start_STATE_ID = 0;
    public static final int TokenMap_CommentStart_STATE_ID = 1;
    public static final int TokenMap_PercentStart_STATE_ID = 2;
    public static final int TokenMap_PercentKeyword_STATE_ID = 3;
    public static final int TokenMap_Word_STATE_ID = 4;
    public static final int TokenMap_Scope_STATE_ID = 5;
    public static final int TokenMap_Colon_STATE_ID = 6;

    public static final int OldCommentMap_Start_STATE_ID = 7;
    public static final int OldCommentMap_CommentStart_STATE_ID = 8;
    public static final int OldCommentMap_CommentEnd_STATE_ID = 9;

    public static final int NewCommentMap_Start_STATE_ID = 10;

    public static final int SourceMap_Start_STATE_ID = 11;
    public static final int SourceMap_SourceEnd_STATE_ID = 12;
    public static final int SourceMap_NeverUsed_STATE_ID = 13;

    private static final int STATE_COUNT = 14;

    private static final int EOL134_TRANSITION_ID = 1;
    private static final int alpha114_TRANSITION_ID = 2;
    private static final int asterisk117_TRANSITION_ID = 3;
    private static final int colon126_TRANSITION_ID = 4;
    private static final int comma127_TRANSITION_ID = 5;
    private static final int commentDone62_TRANSITION_ID = 6;
    private static final int digit115_TRANSITION_ID = 7;
    private static final int dollar131_TRANSITION_ID = 8;
    private static final int equal130_TRANSITION_ID = 9;
    private static final int gt125_TRANSITION_ID = 10;
    private static final int left_brace118_TRANSITION_ID = 11;
    private static final int left_bracket120_TRANSITION_ID = 12;
    private static final int left_paren121_TRANSITION_ID = 13;
    private static final int lt124_TRANSITION_ID = 14;
    private static final int percent112_TRANSITION_ID = 15;
    private static final int period123_TRANSITION_ID = 16;
    private static final int right_brace119_TRANSITION_ID = 17;
    private static final int right_paren122_TRANSITION_ID = 18;
    private static final int semicolon128_TRANSITION_ID = 19;
    private static final int slash116_TRANSITION_ID = 20;
    private static final int sourceDone23_TRANSITION_ID = 21;
    private static final int underscore129_TRANSITION_ID = 22;
    private static final int unicode133_TRANSITION_ID = 23;
    private static final int whitespace132_TRANSITION_ID = 24;

    private static final int TRANSITION_COUNT = 25;

    private static final MethodType[] TRANSITION_TYPES =
    {
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE,
        NO_ARGS_TYPE
    };

    private static final String[] MAP_NAMES =
    {
        "TokenMap",
        "OldCommentMap",
        "NewCommentMap",
        "SourceMap"
    };

    private static final String[][] STATE_NAMES =
    {
        new String[]
        {
            "Start",
            "CommentStart",
            "PercentStart",
            "PercentKeyword",
            "Word",
            "Scope",
            "Colon"
        },

        new String[]
        {
            "Start",
            "CommentStart",
            "CommentEnd"
        },

        new String[]
        {
            "Start"
        },

        new String[]
        {
            "Start",
            "SourceEnd",
            "NeverUsed"
        }
    };

    private static String[][] STATE_TRANSITIONS =
    {
        new String[]
        {
            "EOL",
            "alpha",
            "colon",
            "comma",
            "dollar",
            "equal",
            "left_brace",
            "left_bracket",
            "left_paren",
            "percent",
            "right_brace",
            "right_paren",
            "semicolon",
            "slash",
            "underscore",
            "unicode",
            "whitespace"
        },

        new String[]
        {
            "Default",
            "asterisk",
            "commentDone",
            "slash"
        },

        new String[]
        {
            "Default",
            "alpha",
            "left_brace",
            "percent",
            "right_brace",
            "sourceDone"
        },

        new String[]
        {
            "Default",
            "EOL",
            "alpha",
            "whitespace"
        },

        new String[]
        {
            "Default",
            "EOL",
            "alpha",
            "asterisk",
            "colon",
            "comma",
            "digit",
            "dollar",
            "equal",
            "gt",
            "left_brace",
            "left_bracket",
            "left_paren",
            "lt",
            "period",
            "right_brace",
            "right_paren",
            "semicolon",
            "slash",
            "underscore",
            "whitespace"
        },

        new String[]
        {
            "Default",
            "colon"
        },

        new String[]
        {
            "Default",
            "colon"
        },

        new String[]
        {
            "asterisk",
            "slash"
        },

        new String[]
        {
            "asterisk",
            "commentDone",
            "slash"
        },

        new String[]
        {
            "asterisk",
            "slash"
        },

        new String[]
        {
            "EOL"
        },

        new String[]
        {
            "Default",
            "percent"
        },

        new String[]
        {
            "Default",
            "percent",
            "right_brace"
        },

        new String[]
        {
            "EOL",
            "alpha",
            "asterisk",
            "colon",
            "comma",
            "digit",
            "dollar",
            "equal",
            "gt",
            "left_brace",
            "left_bracket",
            "left_paren",
            "lt",
            "period",
            "right_brace",
            "right_paren",
            "semicolon",
            "slash",
            "underscore",
            "unicode",
            "whitespace"
        }
    };

    private static final String[] TRANSITION_NAMES =
    {
        "Default",
        "EOL",
        "alpha",
        "asterisk",
        "colon",
        "comma",
        "commentDone",
        "digit",
        "dollar",
        "equal",
        "gt",
        "left_brace",
        "left_bracket",
        "left_paren",
        "lt",
        "percent",
        "period",
        "right_brace",
        "right_paren",
        "semicolon",
        "slash",
        "sourceDone",
        "underscore",
        "unicode",
        "whitespace"
    };

    private static final State7[] _States = new State7[STATE_COUNT];

    static
    {
        final Lookup lookup = MethodHandles.lookup();
        final Class<?> clazz = SmcLexerContext.class;
        final int mapSize = MAP_NAMES.length;
        int stateSize;
        int mapIndex;
        int stateIndex;
        int transIndex;
        int stateId = 0;
        String mapName;
        String stateName;
        String transName;
        String methodName;
        MethodType transType;
        MethodHandle entryHandle;
        MethodHandle exitHandle;
        TransitionHandle[] transitions;

        for (mapIndex = 0; mapIndex < mapSize; ++mapIndex)
        {
            mapName = MAP_NAMES[mapIndex];
            stateSize = STATE_NAMES[mapIndex].length;

            for (stateIndex = 0; stateIndex < stateSize; ++stateIndex, ++stateId)
            {
                stateName = STATE_NAMES[mapIndex][stateIndex];
                transitions = new TransitionHandle[TRANSITION_COUNT];

                methodName = String.format(ENTRY_NAME, mapName, stateName);
                entryHandle = lookupMethod(lookup, clazz, methodName, NO_ARGS_TYPE);
                methodName = String.format(EXIT_NAME, mapName, stateName);
                exitHandle = lookupMethod(lookup, clazz, methodName, NO_ARGS_TYPE);

                for (transIndex = 1; transIndex < TRANSITION_COUNT; ++transIndex)
                {
                    transName = TRANSITION_NAMES[transIndex];
                    transType = TRANSITION_TYPES[transIndex];
                    transitions[transIndex] =
                        lookupTransition(lookup, clazz, mapName, stateName, transName, transType);
                }

                _States[stateId] =
                    new State7(
                        String.format(STATE_NAME_FORMAT, mapName, stateName),
                        stateId,
                        entryHandle,
                        exitHandle,
                        transitions,
                        STATE_TRANSITIONS[stateId]);

            }
        }
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
