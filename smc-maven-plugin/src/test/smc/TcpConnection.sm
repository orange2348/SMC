// -*- tab-width: 4; -*-

%{
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003, 2019. Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// Name
//  TcpConnection.sm
//
// Description
//  The TCP/IP state transition diagram.
//
%}

%package net.sf.smc.generator

%import java.net.InetAddress
%import java.net.InetSocketAddress

%class TcpConnection
%start MainMap::CLOSED

%map MainMap
%%
CLOSED
{
    Open(port: int)
        ServiceOpening
        {
            openServerSocket(port);
        }

    Open(address: InetSocketAddress)
        ClientOpening
        {
            openClientSocket(address);
        }

    Open(segment: TcpSegment)
        SYN_RCVD
        {
            sendAcceptSynAck(segment);
        }

    // Ignore undefined transtions when closed.
    UNDEF(segment: TcpSegment)
		nil
        {}

    // Ignore close requests when closed.
    Close
        nil
        {}
}

// Wait here until service open has either succeeded or failed.
ServiceOpening
{
    Accepted()
        LISTEN
        {
            openSuccess();
        }

    OpenFailed(reason: String)
        CLOSED
        {
            openFailed(reason);
        }
}

// Wait here until client open has either succeeded or failed.
ClientOpening
{
    Opened(address: InetSocketAddress)
        SYN_SENT
        {
            send(TcpSegment.SYN,
                 null,
                 0,
                 0,
                 address,
                 null);}

    OpenFailed(reason: String)
        CLOSED
        {
            openFailed(reason);
        }
}

// Server sockets just sit here, creating new client sockets when
// a SYN is received.
LISTEN
{
    // Create a new client socket and send its port number in
    // the SYN/ACK response.
    SYN(segment: TcpSegment)
        nil
        {
            accept(segment);
        }

    Close
        CLOSED
        {
            closeSocket();
            closed("");
        }

    // But don't reset a reset message because there is no
    // connection to reset.
    RST(segment: TcpSegment)
        nil
        {}
}

// An "accepted" client socket starts life in this state.
SYN_RCVD
Entry
{
    startTimer("ACK_TIMER", TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    // The connection was reset before it was established.
    // Close the datagram socket but don't tell anybody.
    RST(segment: TcpSegment)
        CLOSED
        {
            closeSocket();
            clearListener();
        }

    // The TCP state transition diagram shows the server socket
    // taking an ACK transtion to the ESTABLISHED state but that
    // is not quite true. The accepted client socket starts in
    // the ESTABLISHED state while the server socket goes back to
    // LISTEN.
    ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        ESTABLISHED
        {
            accepted();
        }

    Close
        FIN_WAIT_1
        {
            send(TcpSegment.FIN,
                 null,
                 0,
                 0,
                 null,
                 null);
        }

    AckTimeout
        CLOSED
        {
            closeSocket();
            openFailed("acknowledge timeout");
        }
}

// A application-created client starts life in this state.
SYN_SENT
Entry
{
    startTimer("CONN_ACK_TIMER", TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    SYN_ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        ESTABLISHED
        {
            setDestinationPort(segment);
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
            openSuccess();
        }

    Close
        CLOSED
        {
            closeSocket();
            closed("");
        }

    ConnAckTimeout
        CLOSED
        {
            closeSocket();
            openFailed("acknowledge timeout");
        }
}

ESTABLISHED
{
    FIN(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        CLOSE_WAIT
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
            halfClosed();
        }

    PSH(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
            receive(segment);
        }

    Transmit(data: byte[], offset: int, size: int)
        Transmitting
        {
            send(TcpSegment.PSH,
                 data,
                 offset,
                 size,
                 null,
                 null);
        }

    Close
        FIN_WAIT_1
        {
            send(TcpSegment.FIN,
                 null,
                 0,
                 0,
                 null,
                 null);
        }
}

Transmitting
Entry
{
    startTimer("TRANS_ACK_TIMER",
               TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        ESTABLISHED
        {
            transmitted();
        }

    PSH_ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        ESTABLISHED
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
            transmitted();
            receive(segment);
        }

    FIN(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        CLOSE_WAIT
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
            halfClosed();
        }

    Close
        FIN_WAIT_1
        {
            send(TcpSegment.FIN,
                 null,
                 0,
                 0,
                 null,
                 null);
        }

    TransAckTimeout
        CLOSED
        {
            transmitFailed("peer did not acknowledge");
            closed("connection lost");
        }
}

CLOSE_WAIT
{
    Close
        LAST_ACK
        {
            send(TcpSegment.FIN,
                 null,
                 0,
                 0,
                 null,
                 null);
        }
}

LAST_ACK
Entry
{
    startTimer("CLOSE_ACK_TIMER",
               TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        CLOSED
        {
            send(TcpSegment.FIN_ACK,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("");
        }

    CloseAckTimeout
        CLOSED
        {
            closeSocket();
            closed("");
        }
}

FIN_WAIT_1
Entry
{
    startTimer("CLOSE_ACK_TIMER",
               TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        FIN_WAIT_2
        {}

    FIN(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        CLOSING
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
        }

    FIN_ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        TIME_WAIT
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
        }

    CloseAckTimeout
        FIN_WAIT_2
        {
            closeSocket();
        }
}

FIN_WAIT_2
Entry
{
    startTimer("CLOSE_ACK_TIMER", TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    FIN(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        TIME_WAIT
        {
            send(TcpSegment.ACK,
                 null,
                 0,
                 0,
                 segment);
        }

    CloseAckTimeout
        CLOSED
        {
            closeSocket();
        }

    // Ignore undefined transitions.
    UNDEF(segment: TcpSegment)
		nil
        {}
}

CLOSING
Entry
{
    startTimer("CLOSE_ACK_TIMER", TcpConnection.ACK_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        TIME_WAIT
        {}

    CloseAckTimeout
        TIME_WAIT
        {
            closeSocket();
        }

    // Ignore undefined transitions.
    UNDEF(segment: TcpSegment)
		nil
        {}
}

TIME_WAIT
Entry
{
    startTimer("CLOSE_TIMER", TcpConnection.CLOSE_TIMEOUT);
}
Exit
{
    stopTimer();
}
{
    FIN_ACK(segment: TcpSegment)
      [(segment.getSourceAddress()).equals(ctxt.getFarAddress()) &&
       segment.getAcknowledgeNumber() == ctxt.getSequenceNumber()]
        CLOSED
        {
            closeSocket();
        }

    CloseTimeout
        CLOSED
        {
            closeSocket();
        }

    // Ignore undefined transitions.
    UNDEF(segment: TcpSegment)
		nil
        {}
}

Default
{
    Open(port: int)
        nil
        {
            openFailed("already open");
        }

    Open(address: InetAddress, port: int)
        nil
        {
            openFailed("already open");
        }

    Transmit(data: byte[], offset: int, size: int)
        nil
        {
            transmitFailed("connection not established");
        }

    // The default action when an unknown client sends us a
    // segment is to reset the unknown client but remain in
    // the current state for a segment from the real client.
    FIN(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    SYN(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    PSH(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    ACK(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    URG(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    FIN_ACK(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    SYN_ACK(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

   PSH_ACK(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    UNDEF(segment: TcpSegment)
      [!(segment.getSourceAddress()).equals(ctxt.getFarAddress())]
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    // Do not reset a reset. Just go to closed.
    RST(segment: TcpSegment)
        CLOSED
        {
            closeSocket();
            closed("connection reset by peer");
        }

    RST_ACK(segment: TcpSegment)
        CLOSED
        {
            closeSocket();
            closed("connection reset by peer");
        }

    // The remain transitions represent segments received
    // when they were not expected from the peer. The
    // connection is reset.
    FIN(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    SYN(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closed("connection reset");
        }

    PSH(segment: TcpSegment)
        CLOSED         
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    ACK(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    URG(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    FIN_ACK(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    SYN_ACK(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    PSH_ACK(segment: TcpSegment)
        CLOSED
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");}

    UNDEF(segment: TcpSegment)
        nil
        {
            send(TcpSegment.RST,
                 null,
                 0,
                 0,
                 segment);
            closeSocket();
            closed("connection reset");
        }

    // Ignore timeouts which occur when not expected.
    ConnAckTimeout
        nil
        {}

    TransAckTimeout
        nil
        {}

    CloseAckTimeout
        nil
        {}

    CloseTimeout
        nil
        {}
}
%%
